        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Taylor Jones jonest3
        -:    3: * Card: smithy 
        -:    4: *
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <time.h>
        -:   14:#include <string.h>
        -:   15:
        -:   16:#define TEST_RUNS 500
        -:   17:#define CARD_TESTS 3
        -:   18:
        -:   19:
function main called 1 returned 100% blocks executed 99%
        1:   20:int main(){
        1:   21:   printf("* RANDOM TESTING SMITHY CARD *\n\n");
call    0 returned 100%
        -:   22:
        1:   23:   int cards[] = {     curse, estate, duchy, province, copper, silver,
        -:   24:                       gold, adventurer, council_room, feast, gardens,
        -:   25:                       mine, remodel, smithy, village, baron, great_hall,
        -:   26:                       minion, steward, tribute, ambassador, cutpurse,
        -:   27:                       embargo, outpost, salvager, sea_hag, treasure_map       };
        -:   28: 
        -:   29:   struct gameState G, testG;
        1:   30:   int seed = 1000;
        -:   31:   int k[10];
        -:   32:   int numPlayers;;
        -:   33:   int rand_int;
        -:   34:   int rand_hand;
        -:   35:   int rand_deck;
        -:   36:   int rand_discard;
        -:   37:   int total_passes; // counts the total number of tests that were passed
        -:   38:
        -:   39:   int i;
        -:   40:
      501:   41:   for(i = 1; i <= TEST_RUNS; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   42:        printf("-- Test #: %d\n", i);
call    0 returned 100%
        -:   43:        // randomize number of players between 2 and 4
      500:   44:        numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 100%
      500:   45:        printf("-- # Players: %d\n", numPlayers);
call    0 returned 100%
        -:   46:
      500:   47:        k[0] = adventurer; // make sure adventurer is included
        -:   48:
        -:   49:        int j;
      500:   50:        int numSelected = 1;
        -:   51:        int used;
      500:   52:        int passes = 0; // counts the number of tests passed
        -:   53:
        -:   54:        // Get random kingdom cards
     6861:   55:        while(numSelected < 10){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     5861:   56:                used = 0;
        -:   57:                // rand_int used for random card selection
     5861:   58:                rand_int = rand() % (26 + 1 - 8) + 8; // kingdom cards are elements 7-26
call    0 returned 100%
    27292:   59:                for(j = 1; j < numSelected; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
    22792:   60:                        if(k[j] == cards[rand_int]){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     1361:   61:                                used = 1;
     1361:   62:                                break;
        -:   63:                        }
        -:   64:                }
     5861:   65:                if(used == 1) continue;
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     4500:   66:                k[j] = cards[rand_int];
     4500:   67:                numSelected++;
        -:   68:        }
        -:   69:
      500:   70:        initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   71:
        -:   72:        // Set up decks with 0 to 10 cards
      500:   73:        rand_hand = rand() % (10 + 1);
call    0 returned 100%
      500:   74:        G.handCount[0] = rand_hand;
      500:   75:        G.hand[0][0] = smithy;
        -:   76:
      500:   77:        rand_deck = rand() % (10 + 1);
call    0 returned 100%
      500:   78:        G.deckCount[0] = rand_deck;
        -:   79:
      500:   80:        rand_discard = rand() % (10 + 1);
call    0 returned 100%
      500:   81:        G.discardCount[0] = rand_discard;
        -:   82:
      500:   83:        printf("\n\n---- Card Counts ----\n");
call    0 returned 100%
      500:   84:        printf("-    Hand Count: %d\n", rand_hand);
call    0 returned 100%
      500:   85:        printf("-    Deck Count: %d\n", rand_deck);
call    0 returned 100%
      500:   86:        printf("- Discard Count: %d\n", rand_discard);
call    0 returned 100%
        -:   87:
      500:   88:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   89:
      500:   90:        printf("\n--- INITIAL DECKS ---\n\n");
call    0 returned 100%
        -:   91:        char name[MAX_STRING_LENGTH];
        -:   92:
      500:   93:        printf("   Hand:  ");
call    0 returned 100%
     3072:   94:        for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2572:   95:                cardNumToName(G.hand[0][j], name);
call    0 returned 100%
     2572:   96:                printf("%s ", name);
call    0 returned 100%
        -:   97:        }
      500:   98:        printf("\n");
call    0 returned 100%
        -:   99:
      500:  100:        printf("   Deck:  ");
call    0 returned 100%
     2991:  101:        for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     2491:  102:                cardNumToName(G.deck[0][j], name);
call    0 returned 100%
     2491:  103:                printf("%s ", name);
call    0 returned 100%
        -:  104:        }
      500:  105:        printf("\n");
call    0 returned 100%
        -:  106:
      500:  107:        printf("Discard:  ");
call    0 returned 100%
     3043:  108:        for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2543:  109:                cardNumToName(G.discard[0][j], name);
call    0 returned 100%
     2543:  110:                printf("%s ", name);
call    0 returned 100%
        -:  111:        }
      500:  112:        printf("\n");
call    0 returned 100%
        -:  113:
      500:  114:        printf(" Played:  ");
call    0 returned 100%
      500:  115:        printf("\n");
call    0 returned 100%
        -:  116:
        -:  117:/****************************************************************/
        -:  118:	// What smithy should do
     2000:  119:	for(j = 0; j < 3; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1500:  120:		drawCard(0, &G); // assumes drawCard() works correctly
call    0 returned 100%
        -:  121:	}
        -:  122:
      500:  123:	discardCard(0, 0, &G, 0);
call    0 returned 100%
        -:  124:/****************************************************************/
        -:  125:
      500:  126:        printf("\n--- EXPECTED DECKS ---\n\n");
call    0 returned 100%
        -:  127:
      500:  128:        printf("   Hand:  ");
call    0 returned 100%
     4038:  129:        for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
     3538:  130:                cardNumToName(G.hand[0][j], name);
call    0 returned 100%
     3538:  131:                printf("%s ", name);
call    0 returned 100%
        -:  132:        }
      500:  133:        printf("\n");
call    0 returned 100%
        -:  134:
      500:  135:        printf("   Deck:  ");
call    0 returned 100%
     2171:  136:        for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
     1671:  137:                cardNumToName(G.deck[0][j], name);
call    0 returned 100%
     1671:  138:                printf("%s ", name);
call    0 returned 100%
        -:  139:        }
      500:  140:        printf("\n");
call    0 returned 100%
        -:  141:
      500:  142:        printf("Discard:  ");
call    0 returned 100%
     2397:  143:        for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
     1897:  144:                cardNumToName(G.discard[0][j], name);
call    0 returned 100%
     1897:  145:                printf("%s ", name);
call    0 returned 100%
        -:  146:        }
      500:  147:        printf("\n");
call    0 returned 100%
        -:  148:
      500:  149:        printf(" Played:  ");
call    0 returned 100%
     1000:  150:        for(j = 0; j < G.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:  151:                cardNumToName(G.playedCards[j], name);
call    0 returned 100%
      500:  152:                printf("%s ", name);
call    0 returned 100%
        -:  153:        }
      500:  154:        printf("\n");
call    0 returned 100%
        -:  155:
        -:  156:/*******************************************************/
        -:  157:	// Call function        
      500:  158:        cardEffect(smithy, 0, 0, 0, &testG, 0, NULL);
call    0 returned 100%
        -:  159:/******************************************************/
        -:  160:
      500:  161:        printf("\n--- RESULTING DECKS ---\n\n");
call    0 returned 100%
        -:  162:
      500:  163:        printf("   Hand:  ");
call    0 returned 100%
     4502:  164:        for(j = 0; j < testG.handCount[0]; j++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
     4002:  165:                cardNumToName(testG.hand[0][j], name);
call    0 returned 100%
     4002:  166:                printf("%s ", name);
call    0 returned 100%
        -:  167:        }
      500:  168:        printf("\n");
call    0 returned 100%
        -:  169:
      500:  170:        printf("   Deck:  ");
call    0 returned 100%
     1964:  171:        for(j = 0; j < testG.deckCount[0]; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1464:  172:                cardNumToName(testG.deck[0][j], name);
call    0 returned 100%
     1464:  173:                printf("%s ", name);
call    0 returned 100%
        -:  174:        }
      500:  175:        printf("\n");
call    0 returned 100%
        -:  176:
      500:  177:        printf("Discard:  ");
call    0 returned 100%
     2140:  178:        for(j = 0; j < testG.discardCount[0]; j++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
     1640:  179:                cardNumToName(testG.discard[0][j], name);
call    0 returned 100%
     1640:  180:                printf("%s ", name);
call    0 returned 100%
        -:  181:        }
      500:  182:        printf("\n");
call    0 returned 100%
        -:  183:
      500:  184:        printf(" Played:  ");
call    0 returned 100%
     1000:  185:        for(j = 0; j < testG.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:  186:                cardNumToName(testG.playedCards[j], name);
call    0 returned 100%
      500:  187:                printf("%s ", name);
call    0 returned 100%
        -:  188:        }
      500:  189:        printf("\n\n");
call    0 returned 100%
        -:  190:
        -:  191:/*********************************************************************/
      500:  192:	printf("**** TESTING: 3 Cards Added to Player's Hand ****\n");
call    0 returned 100%
        -:  193:
      500:  194:	printf("**** RESULT: ");
call    0 returned 100%
      500:  195:	if(testG.handCount[0] == rand_hand + 3 -1){ 
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       16:  196:		printf("PASSED ****\n");
call    0 returned 100%
       16:  197:		passes++;
        -:  198:	}
        -:  199:	else{
      484:  200:		printf("FAILED ****\n");
call    0 returned 100%
      484:  201:		if(testG.handCount[0] > rand_hand + 3 - 1)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      464:  202:			printf("Test Hand has more cards than expected.\n");
call    0 returned 100%
        -:  203:			// can elaborate here to find out exactly how many if necessary
        -:  204:		else
       20:  205:			printf("Test Hand has fewer cards than expected.\n"); 
call    0 returned 100%
        -:  206:	}
        -:  207:
      500:  208:	printf("**** TESTING: 3 Cards Removed from Player's Deck ****\n");
call    0 returned 100%
        -:  209:
      500:  210:	printf("**** RESULT: ");
call    0 returned 100%
      500:  211:	if(rand_deck < 3){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      125:  212:		if(testG.deckCount[0] == (rand_discard - (3 - rand_deck))){
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       10:  213:			printf("PASSED ****\n");
call    0 returned 100%
       10:  214:			passes++;
        -:  215:		}
        -:  216:		else{
      115:  217:			printf("FAILED ****\n");
call    0 returned 100%
      115:  218:			if(testG.deckCount[0] > (rand_discard - (3 - rand_deck)))
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       20:  219:				printf("Test deck has more cards than expected.\n");
call    0 returned 100%
        -:  220:			else
       95:  221:				printf("Test deck has fewer cards than expected.\n");
call    0 returned 100%
        -:  222:		}
        -:  223:	}
        -:  224:	else{
      375:  225:		if(testG.deckCount[0] == rand_deck - 3){ 
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       17:  226:			printf("PASSED ****\n");
call    0 returned 100%
       17:  227:			passes++;
        -:  228:		}
        -:  229:		else{
      358:  230:			printf("FAILED ****\n");
call    0 returned 100%
      358:  231:			if(testG.deckCount[0] > rand_deck - 2)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       33:  232:				printf("Deck Count greater than expected.\n");
call    0 returned 100%
        -:  233:			else
      325:  234:				printf("Deck Count less than expected.\n");
call    0 returned 100%
        -:  235:		}
        -:  236:	}
        -:  237:	
      500:  238:	printf("**** TESTING: Smithy added to Played Deck ****\n");
call    0 returned 100%
        -:  239:
      500:  240:	printf("**** RESULT: ");
call    0 returned 100%
      500:  241:	if(testG.playedCardCount == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:  242:		if(testG.playedCards[0] == smithy){
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      464:  243:			printf("PASSED ****\n");
call    0 returned 100%
      464:  244:			passes++;
        -:  245:		}
        -:  246:		else{
       36:  247:			printf("FAILED ****\n");
call    0 returned 100%
       36:  248:			printf("Wrong card added to played deck.\n");
call    0 returned 100%
        -:  249:		}	
        -:  250:	}
        -:  251:	else{
    #####:  252:		printf("FAILED ****\n");
call    0 never executed
    #####:  253:		printf("Smithy not added to played deck.\n");
call    0 never executed
        -:  254:	}	
        -:  255:/**************************************************************************/
        -:  256:        // Check to see if card passed all tests
      500:  257:        if(passes == CARD_TESTS){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       14:  258:                printf("***** TRIAL PASSED ALL TESTS *****\n\n");
call    0 returned 100%
       14:  259:                total_passes++;
        -:  260:        }
        -:  261:        else{
      486:  262:                printf("***** TRIAL FAILED *****\n\n");
call    0 returned 100%
        -:  263:        }
        -:  264:   }
        -:  265:
        1:  266:   printf("* TOTAL %d PASSED RUNS OUT OF %d TRIALS *\n\n", total_passes, TEST_RUNS);
call    0 returned 100%
        -:  267:   
        1:  268:   return 0;
        -:  269:}
