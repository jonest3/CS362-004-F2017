        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*jonest3
        -:    2: * Card Test 4*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include "interface.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:// great_hall card
        -:   16:
function main called 1 returned 100% blocks executed 82%
        1:   17:int main(){
        -:   18:   struct gameState G, testG;
        1:   19:   int seed = 10000;
        1:   20:   int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   21:   int numPlayers = MAX_PLAYERS;
        -:   22:   int i;
        1:   23:   int pass = 1;
        -:   24:
        1:   25:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   26:
        1:   27:   int counter = 0;
        -:   28://   while(counter < 500){
        -:   29://{
        1:   30:   counter++;
        1:   31:   printf("---------- TESTING CARD: great_hall ----------\n");
call    0 returned 100%
        -:   32:
        1:   33:   printf("Before: \n");
call    0 returned 100%
        -:   34:
        1:   35:   printf("-Hand: ");
call    0 returned 100%
        1:   36:   printHand(0, &G);
call    0 returned 100%
        1:   37:   printf("-Size: %d\n\n", G.handCount[0]);
call    0 returned 100%
        1:   38:   int handNum = G.handCount[0];
        -:   39:
        1:   40:   printf("-Deck: ");
call    0 returned 100%
        1:   41:   printDeck(0, &G);
call    0 returned 100%
        1:   42:   printf("-Size: %d\n\n", G.deckCount[0]);
call    0 returned 100%
        -:   43: 
        1:   44:   printf("-Discard: ");
call    0 returned 100%
        1:   45:   printDiscard(0, &G);
call    0 returned 100%
        1:   46:   printf("-Size: %d\n\n", G.discardCount[0]);
call    0 returned 100%
        -:   47: 
        1:   48:   printf("-Played: ");
call    0 returned 100%
        1:   49:   printPlayed(0, &G);
call    0 returned 100%
        1:   50:   printf("-Size: %d\n\n", G.playedCardCount);
call    0 returned 100%
        -:   51: 
        1:   52:   printf("Game Action Count: %d\n\n", G.numActions);
call    0 returned 100%
        1:   53:   int numActions = G.numActions;
        -:   54:
        -:   55:   // copy the game state to a testcase
        1:   56:   memcpy(&testG, &G, sizeof(struct gameState));
        -:   57:
        1:   58:   printf("--TESTING: cardEffect & mine\n");
call    0 returned 100%
        1:   59:   if(cardEffect(great_hall, 0, 0, 0, &testG, 0, NULL) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   60:	printf("TEST = FAILED >> cardEffect returned < 0\n");
call    0 never executed
    #####:   61:	pass = 0;
        -:   62:   }
        1:   63:   else printf("TEST = PASSED\n");
call    0 returned 100%
        -:   64:
        1:   65:   printf("\nAfter: \n");
call    0 returned 100%
        -:   66:
        1:   67:   printf("-Hand: ");
call    0 returned 100%
        1:   68:   printHand(0, &testG);
call    0 returned 100%
        1:   69:   printf("-Size: %d\n\n", testG.handCount[0]);
call    0 returned 100%
        -:   70:
        1:   71:   printf("-Deck: ");
call    0 returned 100%
        1:   72:   printDeck(0, &testG);
call    0 returned 100%
        1:   73:   printf("-Size: %d\n\n", testG.deckCount[0]);
call    0 returned 100%
        -:   74:
        1:   75:   printf("-Discard: ");
call    0 returned 100%
        1:   76:   printDiscard(0, &testG);
call    0 returned 100%
        1:   77:   printf("-Size: %d\n\n", testG.discardCount[0]);
call    0 returned 100%
        -:   78:
        1:   79:   printf("-Played: ");
call    0 returned 100%
        1:   80:   printPlayed(0, &testG);
call    0 returned 100%
        1:   81:   printf("-Size: %d\n\n", testG.playedCardCount);
call    0 returned 100%
        -:   82:
        1:   83:   printf("Game Action Count: %d\n\n", testG.numActions);
call    0 returned 100%
        -:   84:   
        -:   85:   // great_hall
        1:   86:   drawCard(0, &G);
call    0 returned 100%
        1:   87:   G.numActions++;
        1:   88:   discardCard(0,0,&G,0);
call    0 returned 100%
        -:   89:
        1:   90:   printf("------RESULTS-----\n");
call    0 returned 100%
        -:   91:
        1:   92:   printf("\nExpected: \n");
call    0 returned 100%
        -:   93:
        1:   94:   printf("-Hand: ");
call    0 returned 100%
        1:   95:   printHand(0, &G);
call    0 returned 100%
        1:   96:   printf("-Size: %d\n\n", G.handCount[0]);
call    0 returned 100%
        -:   97:
        1:   98:   printf("-Deck: ");
call    0 returned 100%
        1:   99:   printDeck(0, &G);
call    0 returned 100%
        1:  100:   printf("-Size: %d\n\n", G.deckCount[0]);
call    0 returned 100%
        -:  101:
        1:  102:   printf("-Discard: ");
call    0 returned 100%
        1:  103:   printDiscard(0, &G);
call    0 returned 100%
        1:  104:   printf("-Size: %d\n\n", G.discardCount[0]);
call    0 returned 100%
        -:  105:
        1:  106:   printf("-Played: ");
call    0 returned 100%
        1:  107:   printPlayed(0, &G);
call    0 returned 100%
        1:  108:   printf("-Size: %d\n\n", G.playedCardCount);
call    0 returned 100%
        -:  109:
        1:  110:   printf("Game Action Count: %d\n\n",G.numActions);
call    0 returned 100%
        -:  111:
        1:  112:   printf("\n\n--Results:\n");
call    0 returned 100%
        -:  113:
        1:  114:   printf("--Testing Hands--\n\n");
call    0 returned 100%
        1:  115:   printf("-Hand Count:\n");
call    0 returned 100%
        1:  116:   printf("Expected: %d\nResults: %d\n", G.handCount[0], testG.handCount[0]);
call    0 returned 100%
        1:  117:   pass = 1;
        1:  118:   if(G.handCount[0] != testG.handCount[0]) {printf("TEST FAILED @ Expected Hand Count != Results\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  119:   else{
        1:  120:  	pass = 1;
        6:  121:	for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  122:		if(G.hand[0][i] != testG.hand[0][i]) {printf("TEST FAILED @ Hands do not match.\n"); break; pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  123:	}
        -:  124:   }
        1:  125:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        -:  127:
        1:  128:   printf("--Testing Hand Increase by Exact Amount--\n");
call    0 returned 100%
        1:  129:   pass = 1;
        1:  130:   if(testG.handCount[0] != handNum) {printf("TEST FAILED @ Hand Count did not increase by 1\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  131:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  132:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        -:  133:
        1:  134:   printf("--Testing Decks--\n");
call    0 returned 100%
        1:  135:   printf("-Deck Count:\n");
call    0 returned 100%
        1:  136:   printf("Expected: %d\nResults: %d\n", G.deckCount[0], testG.deckCount[0]);
call    0 returned 100%
        1:  137:   pass = 1;
        1:  138:   if(G.deckCount[0] != testG.deckCount[0]) {printf("TEST FAILED @ Expected Deck Count != Results\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  139:   else{
        1:  140:	pass = 1;
        5:  141:        for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  142:                if(G.deck[0][i] != testG.deck[0][i]) {printf("TEST FAILED @ Decks do not match.\n"); break; pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  143:        }
        -:  144:   }
        1:  145:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  146:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        -:  147:
        1:  148:   printf("--Testing Discard--\n");
call    0 returned 100%
        1:  149:   printf("-Discard Count:\n");
call    0 returned 100%
        1:  150:   printf("Expected: %d\nResults: %d\n", G.discardCount[0], testG.discardCount[0]);
call    0 returned 100%
        1:  151:   pass = 1;
        1:  152:   if(G.discardCount[0] != testG.discardCount[0]) {printf("TEST FAILED @ Expected Discard Count != Results\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  153:   else{
        1:  154:        for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  155:                if(G.discard[0][i] != testG.discard[0][i]) {printf("TEST FAILED @ Discards do not match.\n"); break; pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  156:        }
        -:  157:   }
        1:  158:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  159:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        -:  160:
        1:  161:   printf("--Testing Played--\n");
call    0 returned 100%
        1:  162:   printf("-Played Count:\n");
call    0 returned 100%
        1:  163:   printf("Expected: %d\nResults: %d\n", G.playedCardCount, testG.playedCardCount);
call    0 returned 100%
        1:  164:   pass = 1;
        1:  165:   if(G.playedCardCount != testG.playedCardCount) {printf("TEST FAILED @ Expected Played Count != Results\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  166:   else{
        2:  167:        for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  168:                if(G.playedCards[i] != testG.playedCards[i]) {printf("TEST FAILED @ Played cards do not match.\n"); break; pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  169:        }
        -:  170:   }
        1:  171:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  172:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        -:  173:
        1:  174:   printf("--Testing Action Count--\n");
call    0 returned 100%
        1:  175:   printf("-# of Actions:\n");
call    0 returned 100%
        1:  176:   printf("Expected: %d\nResults: %d\n", G.numActions, testG.numActions);
call    0 returned 100%
        1:  177:   pass = 1;
        1:  178:   if(G.numActions != testG.numActions){ printf("TEST FAILED @ Expected Number of Actions != Results\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  179:
        1:  180:   if(testG.numActions != numActions+1){ printf("TEST FAILED @ Number of Actions != +1 Action\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  181:
        1:  182:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  183:	printf("TEST SUCCESSFUL\n");
call    0 returned 100%
        1:  184:   return 0;
        -:  185:}
