        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*jonest3
        -:    2: * Card Test 4*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include <string.h>
        -:   13:
        -:   14:// mine card
        -:   15:
function main called 1 returned 100% blocks executed 76%
        1:   16:int main(){
        -:   17:   struct gameState G, testG;
        1:   18:   int seed = 10000;
        1:   19:   int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   20:   int numPlayers = 2;
        -:   21:   int i;
        1:   22:   int pass = 1;
        -:   23:
        1:   24:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   25:
        1:   26:   int counter = 0;
        -:   27://   while(counter < 500){
        -:   28:{
        1:   29:   counter++;
        1:   30:   printf("---------- TESTING CARD: minee ----------\n");
call    0 returned 100%
        -:   31:
        1:   32:   printf("Before: \n");
call    0 returned 100%
        -:   33:
        1:   34:   int handCount = G.handCount[0];
        -:   35:
        1:   36:   printf("-Hand: ");
call    0 returned 100%
        6:   37:   for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   38:	printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   39:   }
        1:   40:   printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:   41:
        1:   42:   printf("-Deck: ");
call    0 returned 100%
        6:   43:   for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   44:	printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   45:   }
        1:   46:   printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:   47:
        1:   48:   printf("-Discard: ");
call    0 returned 100%
        1:   49:   for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   50:	printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:   51:   }
        1:   52:   printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:   53:
        1:   54:   printf("-Played: ");
call    0 returned 100%
        1:   55:   for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   56:	printf("%s ", getCardName(G.playedCards[i]));
call    0 never executed
call    1 never executed
        -:   57:   }
        1:   58:   printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:   59:
        -:   60:   // copy the game state to a testcase
        1:   61:   memcpy(&testG, &G, sizeof(struct gameState));
        -:   62:
        -:   63:   int j;
        -:   64:   int choice1, choice2, choice3;
        4:   65:   for(j = 0; j < 3; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   66:	if(j == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   67:	{
        1:   68:		choice1 = 1;
        1:   69:		choice2 = 0;
        1:   70:		choice3 = 0;
        -:   71:	}
        2:   72:	else if(j == 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   73:	{
        1:   74:		choice1 = 0;
        1:   75:		choice2 = 1;
        1:   76:		choice3 = 0;
        -:   77:	}
        1:   78:	else if(j == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:	{
        1:   80:		choice1 = 0;
        1:   81:		choice2 = 0;
        1:   82:		choice3 = 1;
        -:   83:	}
        -:   84:
        -:   85:
        3:   86:   	printf("--TESTING: cardEffect & mine\n");
call    0 returned 100%
        3:   87:   	if(cardEffect(mine, choice1, choice2, choice3, &testG, 1, NULL) < 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:   88:		printf("TEST = FAILED >> cardEffect returned < 0\n");
call    0 returned 100%
        3:   89:		pass = 0;
        -:   90:   	}
    #####:   91:   	else printf("TEST = PASSED\n");
call    0 never executed
        -:   92:
        3:   93:   	printf("\nAfter: \n");
call    0 returned 100%
        -:   94:
        3:   95:   	printf("-Hand: ");
call    0 returned 100%
       18:   96:   	for(i = 0; i < testG.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:   97:        	printf("%s ", getCardName(testG.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   98:   	}
        3:   99:   	printf("\n-Size: %d\n", testG.handCount[0]);
call    0 returned 100%
        -:  100:
        3:  101:   	printf("-Deck: ");
call    0 returned 100%
       18:  102:   	for(i = 0; i < testG.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  103:        	printf("%s ", getCardName(testG.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  104:   	}
        3:  105:   	printf("\n-Size: %d\n", testG.deckCount[0]);
call    0 returned 100%
        -:  106:
        3:  107:   	printf("-Discard: ");
call    0 returned 100%
        3:  108:   	for(i = 0; i < testG.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  109:        	printf("%s ", getCardName(testG.discard[0][i]));
call    0 never executed
call    1 never executed
        -:  110:   	}
        3:  111:   	printf("\n-Size: %d\n", testG.discardCount[0]);
call    0 returned 100%
        -:  112:
        3:  113:   	printf("-Played: ");
call    0 returned 100%
        3:  114:   	for(i = 0; i < testG.playedCardCount; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  115:		printf("%s ", getCardName(testG.playedCards[i]));
call    0 never executed
call    1 never executed
        -:  116:   	}
        3:  117:   	printf("\n-Size: %d\n", testG.playedCardCount);
call    0 returned 100%
        -:  118:
        -:  119:   	// mine
        -:  120:      int m;
        3:  121:      int result = 1;
        3:  122:      m = G.hand[0][choice1];  //store card we will trash
        -:  123:
        3:  124:      if (G.hand[0][choice1] < copper || G.hand[0][choice1] > gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  125:	{
        2:  126:	  result = -1;
        -:  127://	  break;
        -:  128:	}
        -:  129:		
        3:  130:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  131:	{
    #####:  132:	  result = -1;
        -:  133://	  break;
        -:  134:	}
        -:  135:
        3:  136:      if ( (getCost(G.hand[0][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  137:	{
        3:  138:	  result = -1;
        -:  139://	  break;
        -:  140:	}
        -:  141:	
        3:  142:      if (result){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  143:      		gainCard(choice2, &G, 2, 0);
call    0 returned 100%
        -:  144:
        -:  145:      		//discard card from hand
        3:  146:      		discardCard(0, 0, &G, 0);
call    0 returned 100%
        -:  147:      
        -:  148:      		//discard trashed card
       10:  149:	      for (i = 0; i < G.handCount[0]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  150:	      {
        9:  151:      			if (G.hand[0][i] == m)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:  152:       	    		{
        2:  153:       				discardCard(i, 0, &G, 0);			
call    0 returned 100%
        2:  154:       	      	      		break;
        -:  155:            		}
        -:  156:      	      }
        -:  157:	}
        -:  158:         
        3:  159:   	printf("---Print Results\n");
call    0 returned 100%
        -:  160:
        3:  161:   	printf("\nExpected: \n");
call    0 returned 100%
        -:  162:
        3:  163:   	printf("-Hand: ");
call    0 returned 100%
       14:  164:   	for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
       11:  165:        	printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  166:   	}
        3:  167:   	printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:  168:
        3:  169:   	printf("-Deck: ");
call    0 returned 100%
       18:  170:   	for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  171:        	printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  172:   	}
        3:  173:   	printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:  174:
        3:  175:   	printf("-Discard: ");
call    0 returned 100%
        3:  176:   	for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  177:        	printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:  178:   	}
        3:  179:   	printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:  180:
        3:  181:  	printf("-Played: ");
call    0 returned 100%
       13:  182:   	for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       10:  183:		printf("%s ", getCardName(G.playedCards[i]));
call    0 returned 100%
call    1 returned 100%
        -:  184:   	}
        3:  185:   	printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:  186:
        3:  187:   	printf("\n\n--Results:\n");
call    0 returned 100%
        -:  188:
        3:  189:   	printf("-Hand Count:\n");
call    0 returned 100%
        3:  190:   	printf("Expected: %d\nResults : %d\n", G.handCount[0], testG.handCount[0]);
call    0 returned 100%
        -:  191:
        3:  192:   	printf("--TESTING HAND COUNT--\n");
call    0 returned 100%
        3:  193:   	if(G.handCount[0] != testG.handCount[0]){ printf("CARD FAILED AT >> Hand Count\n"); pass = 0;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  194:   	else{
    #####:  195:		for(i = 0; i < G.handCount[0]; i++){
branch  0 never executed
branch  1 never executed
    #####:  196:			if(G.hand[0][i] != testG.hand[0][i]){ printf("CARD FAILED AT >> Hands do not match\n"); pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  197:		}
        -:  198:   	}
        3:  199:   	if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  200:		printf("TESTING = PASSED\n");
call    0 never executed
        -:  201:
        3:  202:   	printf("--TESTING HAND COUNT GAIN--\n");
call    0 returned 100%
        3:  203:   	if(testG.handCount[0] == (handCount)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  204:		printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  205:   	}
        -:  206:   	else{
    #####:  207:		printf("CARD FAILED AT >> Hand Count did not gain 1 cards & discard 1.\n");
call    0 never executed
    #####:  208:		pass = 0;
        -:  209:   	}
        3:  210:   	printf("\n-Deck Count:\n");
call    0 returned 100%
        3:  211:  	printf("Expected: %d\nResults : %d\n", G.deckCount[0], testG.deckCount[0]);
call    0 returned 100%
        -:  212:
        3:  213:   	printf("--TESTING DECK COUNT\n");
call    0 returned 100%
        3:  214:   	if(G.deckCount[0] != testG.deckCount[0]){ printf("CARD FAILED AT >> Deck Count\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  215:   	else{
       18:  216:		for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  217:			if(G.deck[0][i] != testG.deck[0][i]){ printf("CARD FAILED AT >> Decks do not match\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  218:		}
        -:  219:   	}
        3:  220:   	if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  221:		printf("TESTING = PASSED\n");
call    0 never executed
        -:  222:
        3:  223:   	printf("\n-Discard Count:\n");
call    0 returned 100%
        3:  224:   	printf("Expected: %d\nResults : %d\n", G.discardCount[0], testG.discardCount[0]);
call    0 returned 100%
        -:  225:
        3:  226:   	printf("--TESTING DISCARD\n");
call    0 returned 100%
        3:  227:   	if(G.discardCount[0] != testG.discardCount[0]){ printf("CARD FAILED AT >> Discard Count\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  228:   	else{
        3:  229:		for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  230:			if(G.discard[0][i] != testG.discard[0][i]){ printf("CARD FAILED AT >> Discards do not match\n"); pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  231:		}	
        -:  232:   	}
        3:  233:   	if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  234:		printf("TESTING = PASSED\n");
call    0 never executed
        -:  235:
        3:  236:   	printf("--TESTING PLAYED CARDS\n");
call    0 returned 100%
        3:  237:   	if(testG.playedCardCount == G.playedCardCount){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  238:   		printf("TEST = PASSED\n");
call    0 never executed
    #####:  239:		for(i = 0; i < G.playedCardCount; i++){
branch  0 never executed
branch  1 never executed
    #####:  240:			if(G.playedCards[i] != testG.playedCards[i]){
branch  0 never executed
branch  1 never executed
    #####:  241:				printf("CARD FAILED AT >> Played cards do not match\n");
call    0 never executed
    #####:  242:				pass = 0;
        -:  243:			}
        -:  244:		}
        -:  245:   	}
        -:  246:   	else{
        3:  247:		printf("CARD FAILED AT >> Played Card Count\n");
call    0 returned 100%
        3:  248:		pass = 0;
        -:  249:   	}
        -:  250:
        3:  251:   	if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  252:		printf(">>> TEST SUCCESSFUL <<<\n");
call    0 never executed
        -:  253:   	else
        3:  254:		printf(">>> TEST FAILED <<<\n");
call    0 returned 100%
        -:  255:   	}
        -:  256:   }
        1:  257:   return 0;
        -:  258:}
