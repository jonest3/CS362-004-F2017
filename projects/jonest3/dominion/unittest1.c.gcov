        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* jonest3
        -:    2: * Unit Test 1*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:
        -:   14:#define UNITTEST "updateCoins"
        -:   15:
        -:   16:const char* getCardName(enum CARD card);
        -:   17:
function main called 1 returned 100% blocks executed 89%
        1:   18:int main(){
        1:   19:   printf("TESTING %s\n", UNITTEST);
call    0 returned 100%
        1:   20:   printf("MAX_HAND = %d\n", MAX_HAND);
call    0 returned 100%
        1:   21:   printf("MAX_PLAYERS = %d\n", MAX_PLAYERS);
call    0 returned 100%
        -:   22:
        -:   23:   // set up cards and hands
        -:   24:   int *arrayOfHands[8];
        -:   25:
        -:   26:   int allCopper[MAX_HAND];
        -:   27:   int allSilver[MAX_HAND];
        -:   28:   int allGold[MAX_HAND];
        -:   29:   int copperSilver[MAX_HAND];
        -:   30:   int silverGold[MAX_HAND];
        -:   31:   int goldCopper[MAX_HAND];
        -:   32:   int allThree[MAX_HAND];
        -:   33:   int mixedHand[MAX_HAND];
        -:   34:   
        -:   35:   int i,j;
        -:   36:
      501:   37:   for(j = 0; j < MAX_HAND; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   38:	// set up 3 pure decks
      500:   39:	allCopper[j] = copper;
      500:   40:	allSilver[j] = silver;
      500:   41:	allGold[j] = gold;
      500:   42:	mixedHand[j] = gold;
      500:   43:	allThree[j] = gold;
      500:   44:	copperSilver[j] = silver;
      500:   45:	silverGold[j] = gold;
      500:   46:	goldCopper[j] = copper;
        -:   47:
        -:   48:	// set up mixed deck
      500:   49:	if(j % 2 == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      250:   50:		mixedHand[j] = curse;
      250:   51:	else if(j % 6 == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:		mixedHand[j] = estate;
      250:   53:	else if(j % 5 == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       50:   54:               	mixedHand[j] = duchy;
      200:   55:        else if(j % 4 == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   56:       	        mixedHand[j] = province;
      200:   57:        else if(j % 3 == 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       66:   58:	        mixedHand[j] = copper;
       66:   59:		allThree[j] = copper;
        -:   60:	}
      134:   61:       	else if(j % 2 != 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      134:   62:               	mixedHand[j] = silver;
      134:   63:		allThree[j] = silver;
      134:   64:                copperSilver[j] = copper;
      134:   65:                silverGold[j] = silver;
      134:   66:                goldCopper[j] = gold;
        -:   67:	}
        -:   68:    }
        -:   69:
        1:   70:    arrayOfHands[0] = allCopper;
        1:   71:    arrayOfHands[1] = allSilver;
        1:   72:    arrayOfHands[2] = allGold;
        1:   73:    arrayOfHands[3] = copperSilver;
        1:   74:    arrayOfHands[4] = silverGold;
        1:   75:    arrayOfHands[5] = goldCopper;
        1:   76:    arrayOfHands[6] = allThree;
        1:   77:    arrayOfHands[7] = mixedHand;
        -:   78: 
        -:   79:    int factor;
        -:   80:    int numPlayers;
        -:   81:    struct gameState G;
        1:   82:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   83:  	         sea_hag, tribute, smithy};
        1:   84:    int bonus = 0;
        1:   85:    int seed = 10000;
        -:   86:    int currentHand;
        1:   87:    int success = 1;
        -:   88:    int copperCount;
        -:   89:    int silverCount;
        -:   90:    int goldCount;
        -:   91:
        9:   92:    for(i = 0; i < 8; i++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:   93:        if(i == 0){
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        1:   94:                factor = 1;
        1:   95:                printf("----------Testing ALL COPPER\n");
call    0 returned 100%
        -:   96:        }
        7:   97:        else if(i == 1){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:   98:                factor = 2;
        1:   99:                printf("----------Testing ALL SILVER\n");
call    0 returned 100%
        -:  100:        }
        6:  101:        else if(i == 2){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:  102:                factor = 3;
        1:  103:                printf("----------Testing ALL GOLD\n");
call    0 returned 100%
        -:  104:        }
        5:  105:        else if(i == 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  106:                printf("----------Testing COPPER & SILVER\n");
call    0 returned 100%
        4:  107:        else if(i == 4)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  108:                printf("----------Testing SILVER & GOLD\n");
call    0 returned 100%
        3:  109:        else if(i == 5)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  110:                printf("----------Testing GOLD & COPPER\n");
call    0 returned 100%
        2:  111:        else if(i == 6)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  112:                printf("----------Testing ALL THREE\n");
call    0 returned 100%
        -:  113:        else
        1:  114:                printf("----------Testing MIXED HAND\n");
call    0 returned 100%
        -:  115:
       32:  116:   	for(numPlayers = 2; numPlayers <= MAX_PLAYERS; numPlayers++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       24:  117:		printf("\n----------TESTING FOR %d PLAYERS----------\n", numPlayers);
call    0 returned 100%
       24:  118:		memset(&G, 23, sizeof(struct gameState));
       24:  119:		initializeGame(MAX_PLAYERS, k, seed, &G);
call    0 returned 100%
        -:  120:
        -:  121:		int player;
      120:  122:		for(player = 1; player <= MAX_PLAYERS; player++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       96:  123:			printf("Player %d:\n", player);
call    0 returned 100%
        -:  124:
      576:  125:			for(currentHand = 0; currentHand < 5; currentHand++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      480:  126:				G.handCount[player] = currentHand;
      480:  127:				printf("--Current Hand Size: %d\n", G.handCount[player]);
call    0 returned 100%
        -:  128://                                printf("--Current Hand Size: %d\n", currentHand);
        -:  129:
      480:  130:				memcpy(G.hand[player], arrayOfHands[i], sizeof(int) * MAX_HAND);
        -:  131:
      480:  132:                                printf("--Current Hand Size: %d\n", G.handCount[player]);
call    0 returned 100%
      480:  133:				G.handCount[player] = currentHand;
      480:  134:  				updateCoins(player, &G, bonus);
call    0 returned 100%
        -:  135:
        -:  136:				int y;
        -:  137:
        -:  138://                              printf("--Current Hand Size: %d\n", G.handCount[player]);
        -:  139://				G.hand[player][3] = copper;
        -:  140://				G.hand[player][4] = copper;
        -:  141:
        -:  142://                                G.handCount[player] = currentHand;
        -:  143:
        -:  144://				G.hand[player][5] = copper;
        -:  145://				G.hand[player][6] = copper;
     1440:  146:				for(y = 0; y < G.handCount[player]; y++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      960:  147:					printf("Card: %s\n", getCardName(G.hand[player][y]));
call    0 returned 100%
call    1 returned 100%
      960:  148:					printf("y = %d and handCount = %d\n", y, G.handCount[player]);
call    0 returned 100%
        -:  149:				}
      480:  150:				if(i < 3){
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
      180:  151:					if(G.coins !=  G.handCount[player] * factor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  152:					{
    #####:  153:						success = 0;
    #####:  154:						printf("Error for Player %d at hand %d.\n", player, G.handCount[player]); 	
call    0 never executed
    #####:  155:						printf("G.coins  = %d\n", G.coins);
call    0 never executed
    #####:  156:						printf("Expected = %d\n", G.handCount[player] * factor);
call    0 never executed
    #####:  157:						return 0;
        -:  158:					} 
        -:  159:				}
        -:  160:				else{
        -:  161:	     	                        int y;
      300:  162:	                                copperCount = 0;
      300:  163:                	                silverCount = 0;
      300:  164:                        	        goldCount = 0;
        -:  165:
      900:  166:                                	for(y = 0; y < G.handCount[player]; y++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      600:  167:	       	                                if(G.hand[player][y] == copper)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      144:  168:                	                                copperCount += 1;
      456:  169:                        	                else if(G.hand[player][y] == silver)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
      192:  170:                                	                silverCount += 1;
      264:  171:	                                        else if(G.hand[player][y] == gold)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
      192:  172:        	                                        goldCount += 1;
        -:  173:	                                }
        -:  174:
        -:  175:					int coinSum;
        -:  176:
      300:  177:					if(i == 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       60:  178:						coinSum = (copperCount * 1) + (silverCount * 2);
      240:  179:					else if(i == 4)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       60:  180:						coinSum = (silverCount * 2) + (goldCount * 3);
      180:  181:					else if(i == 5)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       60:  182:						coinSum = (goldCount * 3) + (copperCount * 1);
        -:  183:					else
      120:  184:						coinSum = (goldCount * 3) + (silverCount * 2) + (copperCount * 1);
        -:  185:					
      300:  186:					if(G.coins != coinSum){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  187:						success = 0;
    #####:  188:						printf("Error for Player %d at hand %d.\n", player, G.handCount[player]);
call    0 never executed
    #####:  189:						printf("G.coins  = %d\n", G.coins);
call    0 never executed
    #####:  190:						printf("Expected = %d\n", coinSum);
call    0 never executed
    #####:  191:						return 0;
        -:  192:					}	
        -:  193:				}
        -:  194:			}
       96:  195:			if(success)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       96:  196:				printf("Test = PASSED\n");
call    0 returned 100%
        -:  197://			if(player != MAX_PLAYERS){
        -:  198://				printf("Press [ENTER] to see next player.\n");
        -:  199://				while(getchar() != '\n');
        -:  200://			}
        -:  201:		}
        -:  202:   	}
        -:  203://	if( i != 8){
        -:  204://		printf("Press [ENTER] to test next hand combination.\n");
        -:  205://		while(getchar() != '\n');
        -:  206://	}
        -:  207:   }
        1:  208:   return 0;
        -:  209:}
