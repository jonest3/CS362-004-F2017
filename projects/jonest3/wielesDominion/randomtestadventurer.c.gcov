        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Taylor Jones jonest3
        -:    3: * Card: Adventurer
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include "interface.h" // print all the decks
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <time.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:#define TEST_RUNS 500
        -:   16:#define CARD_TESTS 6 // the number of specific checks for current player
        -:   17:#define CHECK_OTHERS_DECKS 4 // check other players' decks for changes
        -:   18:
function main called 1 returned 100% blocks executed 89%
        1:   19:int main(){
        1:   20:   printf("* RANDOM TESTING ADVENTURER CARD *\n\n");
call    0 returned 100%
        -:   21:
        1:   22:   int cards[] = {	curse, estate, duchy, province, copper, silver,
        -:   23:			gold, adventurer, council_room, feast, gardens,
        -:   24:			mine, remodel, smithy, village, baron, great_hall,
        -:   25:			minion, steward, tribute, ambassador, cutpurse,
        -:   26:			embargo, outpost, salvager, sea_hag, treasure_map	};
        -:   27:
        -:   28:   
        -:   29:
        -:   30:   struct gameState G, testG;
        1:   31:   int seed = 1000;
        -:   32:   int k[10];
        -:   33:   int numPlayers;;
        -:   34:   int rand_int;   
        -:   35:   int rand_hand;
        -:   36:   int rand_deck;
        -:   37:   int rand_discard;
        -:   38:   int total_passes; // counts the total number of tests that were passed
        -:   39:
        -:   40:   int i;
        -:   41:
      501:   42:   for(i = 1; i <= TEST_RUNS; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   43:	printf("-- Test #: %d\n", i);
call    0 returned 100%
        -:   44:	// randomize number of players between 2 and 4
      500:   45:	numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 100%
      500:   46:	printf("-- # Players: %d\n", numPlayers);
call    0 returned 100%
        -:   47:
      500:   48:	k[0] = adventurer; // make sure adventurer is included 
        -:   49:
        -:   50:	int j;
      500:   51:	int numSelected = 1;
        -:   52:	int used;
      500:   53:	int passes = 0; // counts the number of tests passed
        -:   54:
        -:   55:	// Get random kingdom cards
     6861:   56:	while(numSelected < 10){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     5861:   57:		used = 0;
        -:   58:		// rand_int used for random card selection
     5861:   59:		rand_int = rand() % (26 + 1 - 8) + 8; // kingdom cards are elements 7-26
call    0 returned 100%
    27292:   60:		for(j = 1; j < numSelected; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
    22792:   61:			if(k[j] == cards[rand_int]){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     1361:   62:				used = 1;
     1361:   63:				break;
        -:   64:			}
        -:   65:		}
     5861:   66:		if(used == 1) continue;
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     4500:   67:		k[j] = cards[rand_int];
     4500:   68:		numSelected++;
        -:   69:	}
        -:   70:
      500:   71:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   72:
        -:   73:	// Set up decks with 0 to 10 cards
      500:   74:	rand_hand = rand() % (10 + 1);
call    0 returned 100%
      500:   75:	G.handCount[0] = rand_hand;
      500:   76:	G.hand[0][0] = adventurer;
        -:   77:
      500:   78:	rand_deck = rand() % (10 + 1);
call    0 returned 100%
      500:   79:	G.deckCount[0] = rand_deck;
        -:   80:
      500:   81:	rand_discard = rand() % (10 + 1);
call    0 returned 100%
      500:   82:	G.discardCount[0] = rand_discard;
        -:   83:
      500:   84:	printf("\n\n---- Card Counts ----\n");
call    0 returned 100%
      500:   85:	printf("-    Hand Count: %d\n", rand_hand);
call    0 returned 100%
      500:   86:	printf("-    Deck Count: %d\n", rand_deck);
call    0 returned 100%
      500:   87:	printf("- Discard Count: %d\n", rand_discard);
call    0 returned 100%
        -:   88:
      500:   89:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   90:
      500:   91:	int init_hand_advent_count, init_played_advent_count = 0;
        -:   92:
     3072:   93:	for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2572:   94:		if(G.hand[0][j] == adventurer)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
      464:   95:			init_hand_advent_count++;
        -:   96:	}
        -:   97:
      500:   98:	printf("\n--- INITIAL DECKS ---\n\n");
call    0 returned 100%
        -:   99:	char name[MAX_STRING_LENGTH];
        -:  100:
      500:  101:	printf("   Hand:  ");
call    0 returned 100%
     3072:  102:	for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2572:  103:		cardNumToName(G.hand[0][j], name);
call    0 returned 100%
     2572:  104:		printf("%s ", name);
call    0 returned 100%
        -:  105:	}
      500:  106:	printf("\n");
call    0 returned 100%
        -:  107:
      500:  108:	printf("   Deck:  ");
call    0 returned 100%
     2991:  109:	for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     2491:  110:		cardNumToName(G.deck[0][j], name);
call    0 returned 100%
     2491:  111:		printf("%s ", name);
call    0 returned 100%
        -:  112:	}
      500:  113:	printf("\n");
call    0 returned 100%
        -:  114:
      500:  115:	printf("Discard:  ");
call    0 returned 100%
     3043:  116:	for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2543:  117:		cardNumToName(G.discard[0][j], name);
call    0 returned 100%
     2543:  118:		printf("%s ", name);
call    0 returned 100%
        -:  119:	}
      500:  120:	printf("\n");
call    0 returned 100%
        -:  121:
      500:  122:	printf(" Played:  ");	
call    0 returned 100%
      500:  123:	printf("\n");
call    0 returned 100%
        -:  124:
        -:  125:	/***********************************************/
        -:  126:	int tempHand[MAX_HAND];
      500:  127:	int drawnTreasure = 0;
        -:  128:	int cardDrawn;
      500:  129:	j = 0;
        -:  130:	
     3352:  131:      	while(drawnTreasure<2){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     2352:  132:		if (G.deckCount[0] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      590:  133:	  		shuffle(0, &G);
call    0 returned 100%
        -:  134:		}
     2352:  135:		drawCard(0, &G);
call    0 returned 100%
     2352:  136:		cardDrawn = G.hand[0][G.handCount[0]-1];//top card of hand is most recently drawn card.
     2352:  137:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1000:  138:	  		drawnTreasure++;
        -:  139:		else{
     1352:  140:	  		tempHand[j]=cardDrawn;
     1352:  141:	  		G.handCount[0]--; //this should just remove the top card (the most recently drawn one).
     1352:  142:	  		j++;
        -:  143:		}
        -:  144:      	}
     2352:  145:      	while(j-1>=0){
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
     1352:  146:		G.discard[0][G.discardCount[0]++]=tempHand[j-1]; // discard all cards in play that have been drawn
     1352:  147:		j=j-1;
        -:  148:      	}
        -:  149:
      500:  150:	discardCard(0, 0, &G, 0);
call    0 returned 100%
        -:  151:/***********************************************************************/
        -:  152:
      500:  153:	printf("\n--- EXPECTED DECKS ---\n\n");
call    0 returned 100%
        -:  154:
      500:  155:        printf("   Hand:  ");
call    0 returned 100%
     3189:  156:        for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2689:  157:                cardNumToName(G.hand[0][j], name);
call    0 returned 100%
     2689:  158:                printf("%s ", name);
call    0 returned 100%
        -:  159:        }
      500:  160:        printf("\n");
call    0 returned 100%
        -:  161:
      500:  162:        printf("   Deck:  ");
call    0 returned 100%
     1967:  163:        for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1467:  164:                cardNumToName(G.deck[0][j], name);
call    0 returned 100%
     1467:  165:                printf("%s ", name);
call    0 returned 100%
        -:  166:        }
      500:  167:        printf("\n");
call    0 returned 100%
        -:  168:
      500:  169:        printf("Discard:  ");
call    0 returned 100%
     3492:  170:        for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
     2992:  171:                cardNumToName(G.discard[0][j], name);
call    0 returned 100%
     2992:  172:                printf("%s ", name);
call    0 returned 100%
        -:  173:        }
      500:  174:        printf("\n");
call    0 returned 100%
        -:  175:
      500:  176:        printf(" Played:  ");
call    0 returned 100%
     1000:  177:        for(j = 0; j < G.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:  178:                cardNumToName(G.playedCards[j], name);
call    0 returned 100%
      500:  179:                printf("%s ", name);
call    0 returned 100%
        -:  180:        }
      500:  181:        printf("\n");
call    0 returned 100%
        -:  182:
        -:  183:/***********************************************************************/
        -:  184://	memcpy(&testG, &G, sizeof(struct gameState));
        -:  185:
      500:  186:	cardEffect(adventurer, 0, 0, 0, &testG, 0, NULL);
call    0 returned 100%
        -:  187:
      500:  188:	printf("\n--- RESULTING DECKS ---\n\n");
call    0 returned 100%
        -:  189:
      500:  190:        printf("   Hand:  ");
call    0 returned 100%
     3668:  191:        for(j = 0; j < testG.handCount[0]; j++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
     3168:  192:                cardNumToName(testG.hand[0][j], name);
call    0 returned 100%
     3168:  193:                printf("%s ", name);
call    0 returned 100%
        -:  194:        }
      500:  195:        printf("\n");
call    0 returned 100%
        -:  196:
      500:  197:        printf("   Deck:  ");
call    0 returned 100%
     1967:  198:        for(j = 0; j < testG.deckCount[0]; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1467:  199:                cardNumToName(testG.deck[0][j], name);
call    0 returned 100%
     1467:  200:                printf("%s ", name);
call    0 returned 100%
        -:  201:        }
      500:  202:        printf("\n");
call    0 returned 100%
        -:  203:
      500:  204:        printf("Discard:  ");
call    0 returned 100%
     3223:  205:        for(j = 0; j < testG.discardCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2723:  206:                cardNumToName(testG.discard[0][j], name);
call    0 returned 100%
     2723:  207:                printf("%s ", name);
call    0 returned 100%
        -:  208:        }
      500:  209:        printf("\n");
call    0 returned 100%
        -:  210:
      500:  211:        printf(" Played:  ");
call    0 returned 100%
      500:  212:        for(j = 0; j < testG.playedCardCount; j++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  213:                cardNumToName(testG.playedCards[j], name);
call    0 never executed
    #####:  214:                printf("%s ", name);
call    0 never executed
        -:  215:        }
      500:  216:        printf("\n");
call    0 returned 100%
        -:  217:
        -:  218:/***************************************************************************/	
      500:  219:	printf("\n** Testing: Current Player's Hand Count **\n");
call    0 returned 100%
        -:  220:
      500:  221:	printf("*** Result: ");
call    0 returned 100%
      500:  222:	if(G.handCount[0] == testG.handCount[0]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  223:		printf("PASSED ***\n");
call    0 never executed
    #####:  224:		passes++;
        -:  225:	}
        -:  226:	else{
      500:  227:		printf("FAILED ***\n");
call    0 returned 100%
      500:  228:		if(G.handCount[0] > testG.handCount[0])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  229:			printf("Test Hand has less cards than expected.\n");
call    0 never executed
        -:  230:		
        -:  231:		else
      500:  232:			printf("Test Hand has more cards than expected.\n");
call    0 returned 100%
        -:  233:	}
        -:  234:
      500:  235:	printf("** Testing: Current Player's Deck Count **\n");
call    0 returned 100%
        -:  236:
      500:  237:	printf("*** Result: ");
call    0 returned 100%
      500:  238:	if(G.deckCount[0] == testG.deckCount[0]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:  239:		printf("PASSED ***\n");
call    0 returned 100%
      500:  240:		passes++;
        -:  241:	}
        -:  242:	else{
    #####:  243:		printf("FAILED ***\n");
call    0 never executed
    #####:  244:		if(G.deckCount[0] > testG.deckCount[0])
branch  0 never executed
branch  1 never executed
    #####:  245:			printf("Test Deck has less cards than expected.\n");
call    0 never executed
        -:  246:
        -:  247:		else
    #####:  248:			printf("Test Deck has more cards than expected.\n");
call    0 never executed
        -:  249:	}
        -:  250:
      500:  251:	printf("** Testing: Current Player's Discard Count **\n");
call    0 returned 100%
        -:  252:
      500:  253:	printf("*** Result: ");
call    0 returned 100%
      500:  254:	if(G.discardCount[0] == testG.discardCount[0]){
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      231:  255:		printf("PASSED ***\n");
call    0 returned 100%
      231:  256:		passes++;
        -:  257:	}
        -:  258:	else{
      269:  259:		printf("FAILED ***\n");
call    0 returned 100%
      269:  260:		if(G.discardCount[0] > testG.discardCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      269:  261:			printf("Test Discard has less cards than expected.\n");
call    0 returned 100%
        -:  262:
        -:  263:		else
    #####:  264:			printf("Test discard has more cards than expected.\n");
call    0 never executed
        -:  265:	}
        -:  266:
      500:  267:	printf("** Testing: Game's Played Card Count **\n");
call    0 returned 100%
        -:  268:
      500:  269:	printf("*** Result: ");
call    0 returned 100%
      500:  270:	if(G.playedCardCount == testG.playedCardCount){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  271:		printf("PASSED ***\n");
call    0 never executed
    #####:  272:		passes++;
        -:  273:	}
        -:  274:	else{
      500:  275:		printf("FAILED ***\n");
call    0 returned 100%
      500:  276:		if(G.playedCardCount > testG.playedCardCount)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:  277:			printf("Test Played has less cards than expected.\n");
call    0 returned 100%
        -:  278:
        -:  279:		else
    #####:  280:			printf("Test Played has more cards than expected.\n");
call    0 never executed
        -:  281:	}
        -:  282:
      500:  283:	printf("** Testing: 2 Treasures Added to Player's Hand **\n");
call    0 returned 100%
        -:  284:
      500:  285:	printf("*** Result: ");
call    0 returned 100%
      500:  286:	int expect_treas_count, result_treas_count = 0;
        -:  287:	
     3189:  288:	for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2689:  289:		if(G.hand[0][j] == copper  ||  G.hand[0][j] == silver  ||  G.hand[0][j] == gold){
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1907:  290:			expect_treas_count++;
        -:  291:		}
        -:  292:	}
        -:  293:
     3668:  294:	for(j = 0; j < testG.handCount[0]; j++){	
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
     3168:  295:		if(testG.hand[0][j] == copper  ||  testG.hand[0][j] == silver  ||  testG.hand[0][j] == gold){
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     1935:  296:			result_treas_count++;
        -:  297:		}
        -:  298:	}
        -:  299:	
      500:  300:	if(expect_treas_count == result_treas_count){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  301:		printf("PASSED ***\n");
call    0 returned 100%
        1:  302:		passes++;
        -:  303:	}
        -:  304:	else{
      499:  305:		printf("FAILED ***\n");
call    0 returned 100%
      499:  306:		if(expect_treas_count > result_treas_count)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      499:  307:			printf("Player's hand has less treasure cards than expected.\n");
call    0 returned 100%
        -:  308:		
        -:  309:		else
    #####:  310:			printf("Player's hand has more treasure cards than expected.\n");
call    0 never executed
        -:  311:	}
        -:  312:
      500:  313:	printf("** Testing: Adventurer Card Played **\n");
call    0 returned 100%
        -:  314:	
      500:  315:	printf("*** Result: ");
call    0 returned 100%
      500:  316:	int result_hand_advent_count, result_played_advent_count = 0;
      500:  317:	int expect_hand_advent_count, expect_played_advent_count = 0;	
        -:  318:
     3668:  319:	for(j = 0; j < testG.handCount[0]; j++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
     3168:  320:		if(testG.hand[0][j] == adventurer)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
      451:  321:			result_hand_advent_count++;
        -:  322:	}
        -:  323:
      500:  324:	for(j = 0; j < testG.playedCardCount; j++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  325:		if(testG.playedCards[j] == adventurer)
branch  0 never executed
branch  1 never executed
    #####:  326:			result_played_advent_count++;
        -:  327:	}
        -:  328:
     3189:  329:	for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     2689:  330:		if(G.hand[0][j] == adventurer)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  331:			expect_hand_advent_count++;
        -:  332:	}
        -:  333:
     1000:  334:	for(j = 0; j < G.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      500:  335:		if(G.playedCards[j] == adventurer)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      464:  336:			expect_hand_advent_count++;
        -:  337:	}
        -:  338:
      500:  339:	if(expect_hand_advent_count == result_hand_advent_count  &&  expect_played_advent_count ==  result_played_advent_count  &&  result_hand_advent_count == init_hand_advent_count - 1  &&  result_played_advent_count == init_played_advent_count + 1){
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
    #####:  340:		printf("PASSED ***\n");
call    0 never executed
    #####:  341:		passes++;
        -:  342:	}
        -:  343:	else{
      500:  344:		printf("FAILED ***\n");
call    0 returned 100%
        -:  345:
      500:  346:		if(expect_hand_advent_count > result_hand_advent_count)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      456:  347:			printf("Test Hand has less adventurer card(s) than expected.\n");
call    0 returned 100%
        -:  348:		else
       44:  349:			printf("Test Hand has more adventurer card(s) than expected.\n");
call    0 returned 100%
        -:  350:
      500:  351:		if(expect_played_advent_count > result_played_advent_count)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  352:			printf("Test Played has less adventurer card(s) than expected.\n");
call    0 never executed
        -:  353:		else
      500:  354:			printf("Test Played has more adventurer card(s) than expected.\n");
call    0 returned 100%
      500:  355:		if(result_hand_advent_count > init_hand_advent_count - 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       44:  356:			printf("Test Hand failed to discard adventurer card from original hand.\n");
call    0 returned 100%
        -:  357:		else
      456:  358:			printf("Test Hand discarded too many adventurer cards from original hand.\n");
call    0 returned 100%
        -:  359:
      500:  360:		if(result_played_advent_count > init_played_advent_count + 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  361:			printf("Test Played has more than 1 new additional adventurer card.\n");
call    0 never executed
        -:  362:		else
      500:  363:			printf("Test Played has less adventurer cards than expected.\n");
call    0 returned 100%
        -:  364:	}
        -:  365:/*********************************************************************/
        -:  366:	// Check to see if card passed all tests
      500:  367:	if(passes == CARD_TESTS){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  368:		printf("***** TRIAL PASSED ALL TESTS *****\n\n");
call    0 never executed
    #####:  369:		total_passes++;
        -:  370:	}
        -:  371:	else{
      500:  372:		printf("***** TRIAL FAILED *****\n\n");
call    0 returned 100%
        -:  373:	}
        -:  374:   }  
        -:  375:
        1:  376:   printf("* TOTAL %d PASSED RUNS OUT OF %d TRIALS *\n\n", total_passes, TEST_RUNS);
call    0 returned 100%
        -:  377:
        1:  378:   return 0;
        -:  379:} 
