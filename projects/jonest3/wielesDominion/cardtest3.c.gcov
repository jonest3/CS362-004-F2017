        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*jonest3
        -:    2: * Card Test 3*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include <string.h>
        -:   13:
        -:   14:// village card
        -:   15:
function main called 1 returned 100% blocks executed 78%
        1:   16:int main(){
        -:   17:   struct gameState G, testG;
        1:   18:   int seed = 10000;
        1:   19:   int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   20:   int numPlayers = 2;
        -:   21:   int i;
        1:   22:   int pass = 1;
        -:   23:
        1:   24:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   25:
        1:   26:   int counter = 0;
        -:   27://   while(counter < 500){
        -:   28:{
        1:   29:   counter++;
        1:   30:   printf("---------- TESTING CARD: village ----------\n");
call    0 returned 100%
        -:   31:
        1:   32:   printf("Before: \n");
call    0 returned 100%
        -:   33:
        1:   34:   int handCount = G.handCount[0];
        1:   35:   int numActions = G.numActions;
        -:   36: 
        1:   37:   printf("-Hand: ");
call    0 returned 100%
        6:   38:   for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   39:	printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   40:   }
        1:   41:   printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:   42:
        1:   43:   printf("-Deck: ");
call    0 returned 100%
        6:   44:   for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   45:	printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   46:   }
        1:   47:   printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:   48:
        1:   49:   printf("-Discard: ");
call    0 returned 100%
        1:   50:   for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   51:	printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:   52:   }
        1:   53:   printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:   54:
        1:   55:   printf("-Played: ");
call    0 returned 100%
        1:   56:   for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   57:	printf("%s ", getCardName(G.playedCards[i]));
call    0 never executed
call    1 never executed
        -:   58:   }
        1:   59:   printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:   60:
        -:   61:   // copy the game state to a testcase
        1:   62:   memcpy(&testG, &G, sizeof(struct gameState));
        -:   63:
        1:   64:   printf("--TESTING: cardEffect & village\n");
call    0 returned 100%
        1:   65:   if(cardEffect(village, 0, 0, 0, &testG, 1, NULL) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   66:	printf("TEST = FAILED >> cardEffect returned < 0\n");
call    0 never executed
    #####:   67:	pass = 0;
        -:   68:   }
        1:   69:   else printf("TEST = PASSED\n");
call    0 returned 100%
        -:   70:
        1:   71:   printf("\nAfter: \n");
call    0 returned 100%
        -:   72:
        1:   73:   printf("-Hand: ");
call    0 returned 100%
        6:   74:   for(i = 0; i < testG.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   75:        printf("%s ", getCardName(testG.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   76:   }
        1:   77:   printf("\n-Size: %d\n", testG.handCount[0]);
call    0 returned 100%
        -:   78:
        1:   79:   printf("-Deck: ");
call    0 returned 100%
        5:   80:   for(i = 0; i < testG.deckCount[0]; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   81:        printf("%s ", getCardName(testG.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   82:   }
        1:   83:   printf("\n-Size: %d\n", testG.deckCount[0]);
call    0 returned 100%
        -:   84:
        1:   85:   printf("-Discard: ");
call    0 returned 100%
        1:   86:   for(i = 0; i < testG.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   87:        printf("%s ", getCardName(testG.discard[0][i]));
call    0 never executed
call    1 never executed
        -:   88:   }
        1:   89:   printf("\n-Size: %d\n", testG.discardCount[0]);
call    0 returned 100%
        -:   90:
        1:   91:   printf("-Played: ");
call    0 returned 100%
        2:   92:   for(i = 0; i < testG.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   93:	printf("%s ", getCardName(testG.playedCards[i]));
call    0 returned 100%
call    1 returned 100%
        -:   94:   }
        1:   95:   printf("\n-Size: %d\n", testG.playedCardCount);
call    0 returned 100%
        -:   96:
        -:   97:   // village
        -:   98:   //+1 Card
        1:   99:   drawCard(0, &G);
call    0 returned 100%
        -:  100:   //+2 Actions
        1:  101:   G.numActions = G.numActions + 2;
        -:  102:   //discard played card from hand
        1:  103:   discardCard(1, 0, &G, 0);
call    0 returned 100%
        -:  104:   
        1:  105:   printf("---Print Results\n");
call    0 returned 100%
        -:  106:
        1:  107:   printf("\nExpected: \n");
call    0 returned 100%
        -:  108:
        1:  109:   printf("-Hand: ");
call    0 returned 100%
        6:  110:   for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  111:        printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  112:   }
        1:  113:   printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:  114:
        1:  115:   printf("-Deck: ");
call    0 returned 100%
        5:  116:   for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  117:        printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  118:   }
        1:  119:   printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:  120:
        1:  121:   printf("-Discard: ");
call    0 returned 100%
        1:  122:   for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  123:        printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:  124:   }
        1:  125:   printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:  126:
        1:  127:   printf("-Played: ");
call    0 returned 100%
        2:  128:   for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  129:	printf("%s ", getCardName(G.playedCards[i]));
call    0 returned 100%
call    1 returned 100%
        -:  130:   }
        1:  131:   printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:  132:
        1:  133:   printf("\n\n--Results:\n");
call    0 returned 100%
        -:  134:
        1:  135:   printf("-Hand Count:\n");
call    0 returned 100%
        1:  136:   printf("Expected: %d\nResults : %d\n", G.handCount[0], testG.handCount[0]);
call    0 returned 100%
        -:  137:
        1:  138:   printf("--TESTING HAND COUNT--\n");
call    0 returned 100%
        1:  139:   pass = 1;
        1:  140:   if(G.handCount[0] != testG.handCount[0]){ printf("CARD FAILED AT >> Hand Count\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  141:   else{
        6:  142:	for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  143:		if(G.hand[0][i] != testG.hand[0][i]){ printf("CARD FAILED AT >> Hands do not match\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  144:	}
        -:  145:   }
        1:  146:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  147:	printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  148:
        1:  149:   printf("--TESTING HAND COUNT GAIN--\n");
call    0 returned 100%
        1:  150:   pass = 1;
        1:  151:   if(testG.handCount[0] == (handCount)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  152:	printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  153:   }
        -:  154:   else{
    #####:  155:	printf("CARD FAILED AT >> Hand Count did not gain 1 cards & discard 1.\n");
call    0 never executed
    #####:  156:	pass = 0;
        -:  157:   }
        -:  158:
        1:  159:   printf("\n-Deck Count:\n");
call    0 returned 100%
        1:  160:   printf("Expected: %d\nResults : %d\n", G.deckCount[0], testG.deckCount[0]);
call    0 returned 100%
        1:  161:   printf("--TESTING DECK COUNT\n");
call    0 returned 100%
        1:  162:   pass = 1;
        1:  163:   if(G.deckCount[0] != testG.deckCount[0]){ printf("CARD FAILED AT >> Deck Count\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  164:   else{
        5:  165:	for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  166:		if(G.deck[0][i] != testG.deck[0][i]){ printf("CARD FAILED AT >> Decks do not match\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  167:	}
        -:  168:   }
        1:  169:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  170:	printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  171:
        1:  172:   printf("\n-Discard Count:\n");
call    0 returned 100%
        1:  173:   printf("Expected: %d\nResults : %d\n", G.discardCount[0], testG.discardCount[0]);
call    0 returned 100%
        1:  174:   printf("--TESTING DISCARD\n");
call    0 returned 100%
        1:  175:   pass = 1;
        1:  176:   if(G.discardCount[0] != testG.discardCount[0]){ printf("CARD FAILED AT >> Discard Count\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  177:   else{
        1:  178:	for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  179:		if(G.discard[0][i] != testG.discard[0][i]){ printf("CARD FAILED AT >> Discards do not match\n"); pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  180:	}	
        -:  181:   }
        1:  182:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  183:	printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  184:
        1:  185:   printf("--TESTING PLAYED CARDS\n");
call    0 returned 100%
        1:  186:   pass = 1;
        1:  187:   if(testG.playedCardCount == G.playedCardCount){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  188:   	printf("TEST = PASSED\n");
call    0 returned 100%
        2:  189:	for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50%
        1:  190:		if(G.playedCards[i] != testG.playedCards[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  191:			printf("CARD FAILED AT >> Played cards do not match\n");
call    0 never executed
    #####:  192:			pass = 0;
        -:  193:		}
        -:  194:	}
        -:  195:   }
        -:  196:   else{
    #####:  197:	printf("CARD FAILED AT >> Played Card Count\n");
call    0 never executed
    #####:  198:	pass = 0;
        -:  199:   }
        -:  200:   
        1:  201:   printf("--TESTING ACTION COUNT\n");
call    0 returned 100%
        1:  202:   pass = 1;
        1:  203:   if(testG.numActions != numActions+2) { printf("CARD FAILED @ >> did not gain 2 actions\n"); pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  204:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  205:	printf("TEST = SUCCESSFUL\n");
call    0 returned 100%
        -:  206:   }
        1:  207:   return 0;
        -:  208:}
