        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* jonest3
        -:    2: * Unit Test 2*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:#include <assert.h>
        -:   14:
function main called 1 returned 100% blocks executed 92%
        1:   15:int main(){
        1:   16:   printf("----------TESTING ISGAMEOVER----------\n\n");
call    0 returned 100%
        -:   17:
        -:   18:   // Set up game
        1:   19:   int seed = 1000;
        1:   20:   int numPlayers = MAX_PLAYERS;
        1:   21:   int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   22:   struct gameState G;
        -:   23:
        -:   24://   assert(initializeGame(numPlayers, k, seed, &G));
        1:   25:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   26:
        -:   27:
        1:   28:   int testNum = 3;
        -:   29:   int i;
        -:   30:
        4:   31:   for(i = 0; i < testNum; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   32:
        3:   33:   	int isOver = 0;
        -:   34:
        -:   35:   	// check to see if game is over after setup
        3:   36:   	if(i == 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   37:		printf("--TESTING GAME OVER AFTER START--\n");
call    0 returned 100%
        1:   38:		isOver = isGameOver(&G);
call    0 returned 100%
        -:   39:
        1:   40:		if(!isOver) printf("TEST PASSED @ After Game Initialized\n");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    #####:   41:		else printf("TEST FAILED @ After Game Initialized\n");
call    0 never executed
        -:   42:   	}
        -:   43:   	// check to see that game ends when province stack is empty
        2:   44:   	else if(i == 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   45:		printf("--TESTING PROVINCE EMPTY--\n");
call    0 returned 100%
        1:   46:		G.supplyCount[province] = 0;
        1:   47:		isOver = isGameOver(&G);
call    0 returned 100%
        -:   48:	
        1:   49:		if(isOver) printf("TEST PASSED @ Province Stack == 0\n");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    #####:   50:		else printf("TEST FAILED @ Province Stack == 0\n");
call    0 never executed
        -:   51:
        1:   52:		G.supplyCount[province] = 8;
        -:   53:   	}
        -:   54:	// check to see if game is over when 3 supply piles are 0
        1:   55:   	else if(i == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   56:		// For all cards
        1:   57:		int cards[25] = {curse, estate, duchy, copper, 
        -:   58:				silver, gold, adventurer, council_room, feast, 
        -:   59:				gardens, mine, remodel, smithy, village, 
        -:   60:				baron, great_hall, minion, steward, tribute, 
        -:   61:				ambassador, cutpurse, embargo, outpost, salvager, 
        -:   62:				sea_hag};
        -:   63:		int card1, card2, card3, m;
        -:   64:		
       24:   65:		for(m = 0; m < 23; m++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   66:
        -:   67:			int j;
      598:   68:			for(j = 0; j < 25; j++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      575:   69:				G.supplyCount[cards[j]] = 8;
        -:   70:
       23:   71:			assert(!isGameOver(&G));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   72:
       23:   73:			card1 = cards[m];
       23:   74:			card2 = cards[m+1];
       23:   75:			card3 = cards[m+2];
        -:   76:
       23:   77:			printf("\n**Testing Cards: %s, %s, & %s**\n", getCardName(card1), getCardName(card2), getCardName(card3));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   78:
        -:   79:			// check to see if game is over when 3 supply piles are 1
       23:   80:			printf("\n--Testing Supplies == 1--\n");
call    0 returned 100%
       92:   81:			for(j = 0; j < 3; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       69:   82:				if(j == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       23:   83:					G.supplyCount[card1] = 1;
       46:   84:				else if(j == 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       23:   85:					G.supplyCount[card2] = 1;
        -:   86:				else
       23:   87:					G.supplyCount[card3] = 1;
        -:   88:	
       69:   89:				if(isGameOver(&G)){ printf("TEST FAILED @ Game over when %d supply == 1\n", j+1); break;}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       69:   90:				else printf("TEST PASSED @ Cards with supply == 1: %d\n", j+1);
call    0 returned 100%
        -:   91:
        -:   92:			}
        -:   93:			// check to see if game is over when 3 supply piles are 0
       23:   94:			printf("\n--Testing Supplies == 0--\n");
call    0 returned 100%
       91:   95:			for(j = 0; j < 3; j++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
       69:   96:				if(j == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   97:				{
       23:   98:					G.supplyCount[card1] = 0; printf("%s's supply count: %d\n", getCardName(card1), G.supplyCount[card1]);
call    0 returned 100%
call    1 returned 100%
        -:   99:				}
       46:  100:				else if(j == 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  101:				{
       23:  102:					G.supplyCount[card2] = 0; printf("%s's supply count: %d\n", getCardName(card2), G.supplyCount[card2]);
call    0 returned 100%
call    1 returned 100%
        -:  103:				}
        -:  104:				else
        -:  105:				{
       23:  106:					G.supplyCount[card3] = 0; printf("%s's supply count: %d\n", getCardName(card3), G.supplyCount[card3]);
call    0 returned 100%
call    1 returned 100%
        -:  107:				}
        -:  108:
       69:  109:				if(isGameOver(&G)  &&  j == 2) printf("TEST PASSED @ Game over when 3 supply == 0\n");
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
       47:  110:				else if(isGameOver(&G)  && j != 2){ printf("TEST FAILED @ Game over when %d supply == 0\n", j+1); break;}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
call    5 never executed
       47:  111:				else if(!isGameOver(&G)  &&  j == 2){ printf("TEST FAILED @ Game not over when 3 supply == 0\n"); break;}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:   }
        1:  116:   return 0;
        -:  117:}
