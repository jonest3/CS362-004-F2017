        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*jonest3
        -:    2: * Card Test 2*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <assert.h>
        -:   12:#include <string.h>
        -:   13:
        -:   14:// smithy card
        -:   15:
function main called 1 returned 100% blocks executed 76%
        1:   16:int main(){
        -:   17:   struct gameState G, testG;
        1:   18:   int seed = 10000;
        1:   19:   int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   20:   int numPlayers = 2;
        -:   21:   int i;
        1:   22:   int pass = 1;
        1:   23:   int total_pass = 1;
        -:   24:
        1:   25:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   26:
        1:   27:   int counter = 0;
        -:   28://   while(counter < 500){
        -:   29:{
        1:   30:   G.hand[0][0] = smithy;
        -:   31:
        1:   32:   counter++;
        1:   33:   printf("---------- TESTING CARD: smithy ----------\n");
call    0 returned 100%
        -:   34:
        1:   35:   printf("Before: \n");
call    0 returned 100%
        -:   36:
        1:   37:   int handCount = G.handCount[0];
        -:   38:
        1:   39:   printf("-Hand: ");
call    0 returned 100%
        6:   40:   for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   41:	printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   42:   }
        1:   43:   printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:   44:
        1:   45:   printf("-Deck: ");
call    0 returned 100%
        6:   46:   for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   47:	printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   48:   }
        1:   49:   printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:   50:
        1:   51:   printf("-Discard: ");
call    0 returned 100%
        1:   52:   for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   53:	printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:   54:   }
        1:   55:   printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:   56:
        1:   57:   printf("-Played: ");
call    0 returned 100%
        1:   58:   for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   59:        printf("%s ", getCardName(G.playedCards[i]));
call    0 never executed
call    1 never executed
        -:   60:   }
        1:   61:   printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:   62:
        -:   63:
        -:   64:   // copy the game state to a testcase
        1:   65:   memcpy(&testG, &G, sizeof(struct gameState));
        -:   66:
        1:   67:   pass = 1;
        1:   68:   printf("--TESTING: cardEffect & smithy\n");
call    0 returned 100%
        1:   69:   if(cardEffect(smithy, 0, 0, 0, &testG, 0, NULL) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   70:	printf("TEST = FAILED >> cardEffect returned < 0\n");
call    0 never executed
    #####:   71:	pass = 0;
    #####:   72:	total_pass = 0;
        -:   73:   }
        1:   74:   else printf("TEST = PASSED\n");
call    0 returned 100%
        -:   75:
        1:   76:   printf("\nAfter: \n");
call    0 returned 100%
        -:   77:
        1:   78:   printf("-Hand: ");
call    0 returned 100%
        7:   79:   for(i = 0; i < testG.handCount[0]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:   80:        printf("%s ", getCardName(testG.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   81:   }
        1:   82:   printf("\n-Size: %d\n", testG.handCount[0]);
call    0 returned 100%
        -:   83:
        1:   84:   printf("-Deck: ");
call    0 returned 100%
        4:   85:   for(i = 0; i < testG.deckCount[0]; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   86:        printf("%s ", getCardName(testG.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:   87:   }
        1:   88:   printf("\n-Size: %d\n", testG.deckCount[0]);
call    0 returned 100%
        -:   89:
        1:   90:   printf("-Discard: ");
call    0 returned 100%
        1:   91:   for(i = 0; i < testG.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   92:        printf("%s ", getCardName(testG.discard[0][i]));
call    0 never executed
call    1 never executed
        -:   93:   }
        1:   94:   printf("\n-Size: %d\n", testG.discardCount[0]);
call    0 returned 100%
        -:   95:
        1:   96:   printf("-Played: ");
call    0 returned 100%
        2:   97:   for(i = 0; i < testG.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:   98:	printf("%s ", getCardName(testG.playedCards[i]));
call    0 returned 100%
call    1 returned 100%
        -:   99:   }
        1:  100:   printf("\n-Size: %d\n", testG.playedCardCount);
call    0 returned 100%
        -:  101:
        -:  102:   // Smithy
        -:  103:   // +3 Cards
        4:  104:   for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  105:   {
        3:  106:	drawCard(0, &G);
call    0 returned 100%
        -:  107:   }
        -:  108:   // discard card from hand
        1:  109:   discardCard(0, 0, &G, 0);
call    0 returned 100%
        -:  110:
        1:  111:   printf("---Print Results\n");
call    0 returned 100%
        -:  112:
        1:  113:   printf("\nExpected: \n");
call    0 returned 100%
        -:  114:
        1:  115:   printf("-Hand: ");
call    0 returned 100%
        8:  116:   for(i = 0; i < G.handCount[0]; i++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:  117:        printf("%s ", getCardName(G.hand[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  118:   }
        1:  119:   printf("\n-Size: %d\n", G.handCount[0]);
call    0 returned 100%
        -:  120:
        1:  121:   printf("-Deck: ");
call    0 returned 100%
        3:  122:   for(i = 0; i < G.deckCount[0]; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  123:        printf("%s ", getCardName(G.deck[0][i]));
call    0 returned 100%
call    1 returned 100%
        -:  124:   }
        1:  125:   printf("\n-Size: %d\n", G.deckCount[0]);
call    0 returned 100%
        -:  126:
        1:  127:   printf("-Discard: ");
call    0 returned 100%
        1:  128:   for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  129:        printf("%s ", getCardName(G.discard[0][i]));
call    0 never executed
call    1 never executed
        -:  130:   }
        1:  131:   printf("\n-Size: %d\n", G.discardCount[0]);
call    0 returned 100%
        -:  132:
        1:  133:   printf("-Played: ");
call    0 returned 100%
        2:  134:   for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  135:        printf("%s ", getCardName(G.playedCards[i]));
call    0 returned 100%
call    1 returned 100%
        -:  136:   }
        1:  137:   printf("\n-Size: %d\n", G.playedCardCount);
call    0 returned 100%
        -:  138:
        -:  139:
        1:  140:   printf("\n\n--Results:\n");
call    0 returned 100%
        -:  141:
        1:  142:   printf("-Hand Count:\n");
call    0 returned 100%
        1:  143:   printf("Expected: %d\nResults : %d\n", G.handCount[0], testG.handCount[0]);
call    0 returned 100%
        -:  144:
        1:  145:   printf("--TESTING HAND COUNT--\n");
call    0 returned 100%
        1:  146:   pass = 1;
        1:  147:   if(G.handCount[0] != testG.handCount[0]){ printf("CARD FAILED AT >> Hand Count\n"); pass = 0; total_pass = 0;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  148:   else{
    #####:  149:	for(i = 0; i < G.handCount[0]; i++){
branch  0 never executed
branch  1 never executed
    #####:  150:		if(G.hand[0][i] != testG.hand[0][i]){ printf("CARD FAILED AT >> Hands do not match\n"); pass = 0; total_pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  151:	}
        -:  152:   }
        1:  153:   if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  154:	printf("TESTING = PASSED\n");
call    0 never executed
        -:  155:
        1:  156:   printf("--TESTING HAND COUNT GAIN--\n");
call    0 returned 100%
        1:  157:   pass = 1;
        1:  158:   if(testG.handCount[0] == (2+handCount)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:	printf("TESTING = PASSED\n");
call    0 never executed
        -:  160:   }
        -:  161:   else{
        1:  162:	printf("CARD FAILED AT >> Hand Count did not gain 3 cards & discard smithy.\n");
call    0 returned 100%
        1:  163:	pass = 0;
        1:  164:	total_pass = 0;
        -:  165:   }
        1:  166:   printf("\n-Deck Count:\n");
call    0 returned 100%
        1:  167:   printf("Expected: %d\nResults : %d\n", G.deckCount[0], testG.deckCount[0]);
call    0 returned 100%
        -:  168:
        1:  169:   printf("--TESTING DECK COUNT\n");
call    0 returned 100%
        1:  170:   pass = 1;
        1:  171:   if(G.deckCount[0] != testG.deckCount[0]){ printf("CARD FAILED AT >> Deck Count\n"); pass = 0; total_pass = 0;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  172:   else{
    #####:  173:	for(i = 0; i < G.deckCount[0]; i++){
branch  0 never executed
branch  1 never executed
    #####:  174:		if(G.deck[0][i] != testG.deck[0][i]){ printf("CARD FAILED AT >> Decks do not match\n"); pass = 0; total_pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  175:	}
        -:  176:   }
        1:  177:   if(pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  178:	printf("TESTING = PASSED\n");
call    0 never executed
        -:  179:
        1:  180:   printf("\n-Discard Count:\n");
call    0 returned 100%
        1:  181:   printf("Expected: %d\nResults : %d\n", G.discardCount[0], testG.discardCount[0]);
call    0 returned 100%
        -:  182:
        1:  183:   printf("--TESTING DISCARD\n");
call    0 returned 100%
        1:  184:   pass = 1;
        1:  185:   if(G.discardCount[0] != testG.discardCount[0]){ printf("CARD FAILED AT >> Discard Count\n"); pass = 0; total_pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  186:   else{
        1:  187:	for(i = 0; i < G.discardCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  188:		if(G.discard[0][i] != testG.discard[0][i]){ printf("CARD FAILED AT >> Discards do not match\n"); pass = 0; total_pass = 0;}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  189:	}	
        -:  190:   }
        1:  191:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  192:	printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  193:
        1:  194:   printf("\n-Played Count:\n");
call    0 returned 100%
        1:  195:   printf("Expected: %d\nResults : %d\n", G.playedCardCount, testG.playedCardCount);
call    0 returned 100%
        -:  196:
        1:  197:   printf("--TESTING PLAYED COUNT\n");
call    0 returned 100%
        1:  198:   pass = 1;
        1:  199:   if(G.playedCardCount != testG.playedCardCount){ printf("CARD FAILED AT >> Played Count\n"); pass = 0; total_pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  200:   else{
        2:  201:        for(i = 0; i < G.playedCardCount; i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  202:                if(G.playedCards[i] != testG.playedCards[i]){ printf("CARD FAILED AT >> Played cards do not match\n"); pass = 0; total_pass = 0;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  203:        }
        -:  204:   }
        1:  205:   if(pass)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  206:        printf("TESTING = PASSED\n");
call    0 returned 100%
        -:  207:
        1:  208:   if(total_pass)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  209:	printf(">>> TEST SUCCESSFUL <<<\n");
call    0 never executed
        -:  210:   else
        1:  211:	printf(">>> TEST FAILED <<<\n");
call    0 returned 100%
        -:  212:   }
        1:  213:   return 0;
        -:  214:}
