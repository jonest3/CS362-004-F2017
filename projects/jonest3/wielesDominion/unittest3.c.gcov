        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* jonest3
        -:    2: * Unit Test 3*/
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include "getCard.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:
        -:   14:// gainCard(int supplyPos, struct gameState *state, int toFlag, int player);
        -:   15:
        -:   16:// toFlag == 0: add to discard
        -:   17:// toFlag == 1: add to deck
        -:   18:// toFlag == 2: add to hand
        -:   19:
        -:   20:void clear_Deck_Discard_Hand(struct gameState *state);
        -:   21:void printPlayersCards(int testCase, int player, struct gameState *state);
        -:   22:int check_if_gained(int card, int testCase, int player, struct gameState *state);
        -:   23:
function main called 1 returned 100% blocks executed 100%
        1:   24:int main(){
        -:   25:
        1:   26:   printf("TESTING gainCard()\n\n");
call    0 returned 100%
        -:   27:
        -:   28:   // set up game
        1:   29:   printf("MAX_PLAYERS = %d\n", MAX_PLAYERS);
call    0 returned 100%
        -:   30:
        1:   31:   int numPlayers = MAX_PLAYERS;
        -:   32:   struct gameState G;
        1:   33:   int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, 
        -:   34:		tribute, smithy};
        1:   35:   int seed = 1000;
        -:   36:   
        1:   37:   initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   38:
        1:   39:   int cardArray[] = {curse, estate, duchy, province,
        -:   40:		      copper, silver, gold,
        -:   41:		      adventurer, council_room, feast, gardens, mine,
        -:   42:		      remodel, smithy, village,
        -:   43:		      baron, great_hall, minion, steward, tribute, 
        -:   44:		      ambassador, cutpurse, embargo, outpost, salvager, 
        -:   45:		      sea_hag, treasure_map};
        -:   46:
        -:   47:   // Clear discard, deck, and hands for all players
        1:   48:   clear_Deck_Discard_Hand(&G);
call    0 returned 100%
        -:   49:
        -:   50:   int testCase;
        -:   51:   int i,j,m;
        -:   52://   int gained; // 0 = true
        -:   53:
       29:   54:   for(i = 0; i < 28; i++){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
       28:   55:	printf("--Card: %s\n\n", getCardName(cardArray[i]));
call    0 returned 100%
call    1 returned 100%
        -:   56:
      140:   57:	for(j = 0; j < MAX_PLAYERS; j++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      448:   58:   		for(testCase = 0; testCase < 3; testCase++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      336:   59:			if(testCase == 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      112:   60:				printf("Testing Gaining %s to Discard for Player %d:\n", getCardName(cardArray[i]),j);                                   
call    0 returned 100%
call    1 returned 100%
      112:   61:				gainCard(cardArray[i], &G, 0, j);
call    0 returned 100%
        -:   62:			}
      224:   63:			else if(testCase == 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      112:   64:				printf("Testing Gaining %s to Deck for Player %d:\n", getCardName(cardArray[i]),j);
call    0 returned 100%
call    1 returned 100%
      112:   65:				gainCard(cardArray[i], &G, 1, j);
call    0 returned 100%
        -:   66:
        -:   67:			}
        -:   68:			else{
      112:   69:				printf("Testing Gaining %s to Hand for Player %d:\n", getCardName(cardArray[i]),j);
call    0 returned 100%
call    1 returned 100%
      112:   70:				gainCard(cardArray[i], &G, 2, j);
call    0 returned 100%
        -:   71:			}
        -:   72:		
      336:   73:			if(check_if_gained(cardArray[i],testCase, j, &G)){
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
      198:   74:				printf("--TEST PASSED--\n");
call    0 returned 100%
      990:   75:				for(m = 0; m < MAX_PLAYERS; m++){
branch  0 taken 80%
branch  1 taken 20%
      792:   76:					printPlayersCards(testCase, m, &G);
call    0 returned 100%
        -:   77:				}
        -:   78:			}
        -:   79:			else{
      138:   80:				printf("Supply of %s was empty; COULD NOT GAIN\n", getCardName(cardArray[i]));
call    0 returned 100%
call    1 returned 100%
      138:   81:				printf("--TEST PASSED--\n");				
call    0 returned 100%
        -:   82:			}
        -:   83:	   	}
        -:   84:	}
        -:   85:   }
        -:   86:
        1:   87:   return 0;
        -:   88:}
        -:   89:
function clear_Deck_Discard_Hand called 1 returned 100% blocks executed 100%
        1:   90:void clear_Deck_Discard_Hand(struct gameState *state){
        -:   91:
        -:   92:   int i;
        -:   93:
        5:   94:   for(i = 0; i < MAX_PLAYERS; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   95:	state->deck[i][0] = 0;
        4:   96:	state->deckCount[i] = 0;
        4:   97:	state->discard[i][0] = 0;
        4:   98:	state->deckCount[i] = 0;
        4:   99:	state->hand[i][0] = 0;
        4:  100:	state->handCount[i] = 0;
        -:  101:   }
        1:  102:}
        -:  103:
function printPlayersCards called 792 returned 100% blocks executed 100%
      792:  104:void printPlayersCards(int testCase, int player, struct gameState *state){
        -:  105:   int i;
        -:  106:
        -:  107:
      792:  108:   printf("Player %d: ", player);
call    0 returned 100%
        -:  109:
      792:  110:   if(testCase == 0){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     2916:  111:	for(i = 0; i < state->discardCount[player]; i++){
branch  0 taken 90%
branch  1 taken 10%
     2628:  112:		printf("%s ", getCardName(state->discard[player][i]));
call    0 returned 100%
call    1 returned 100%
        -:  113:	}
        -:  114:   }
      504:  115:   else if(testCase == 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     2268:  116:	for(i = 0; i < state->deckCount[player]; i++){
branch  0 taken 89%
branch  1 taken 11%
     2016:  117:		printf("%s ", getCardName(state->deck[player][i]));
call    0 returned 100%
call    1 returned 100%
        -:  118:	}
        -:  119:   }
        -:  120:   else{
     2268:  121:	for(i = 0; i < state->handCount[player]; i++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
     2016:  122:		printf("%s ", getCardName(state->hand[player][i]));
call    0 returned 100%
call    1 returned 100%
        -:  123:	}
        -:  124:   }
      792:  125:   printf("\n");
call    0 returned 100%
      792:  126:}
        -:  127:
function check_if_gained called 336 returned 100% blocks executed 100%
      336:  128:int check_if_gained(int card, int testCase, int player, struct gameState *state){
        -:  129:
      336:  130:   if(testCase == 0){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      112:  131:	return (card == state->discard[player][(state->discardCount[player])-1]);
        -:  132:   }
      224:  133:   else if(testCase == 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      112:  134:	return (card == state->deck[player][(state->deckCount[player])-1]);
        -:  135:   }
      112:  136:   return (card == state->hand[player][(state->handCount[player])-1]);
        -:  137:   
        -:  138:} 
