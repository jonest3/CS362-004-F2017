        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Taylor Jones jonest3
        -:    3: * Card: village 
        -:    4: *
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <time.h>
        -:   14:#include <string.h>
        -:   15:
        -:   16:#define TEST_RUNS 50000
        -:   17:#define CARD_TESTS 4
        -:   18:
        -:   19:
function main called 1 returned 100% blocks executed 89%
        1:   20:int main(){
        1:   21:   printf("* RANDOM TESTING VILLAGE CARD *\n\n");
call    0 returned 100%
        -:   22:
        1:   23:   int cards[] = {     curse, estate, duchy, province, copper, silver,
        -:   24:                       gold, adventurer, council_room, feast, gardens,
        -:   25:                       mine, remodel, smithy, village, baron, great_hall,
        -:   26:                       minion, steward, tribute, ambassador, cutpurse,
        -:   27:                       embargo, outpost, salvager, sea_hag, treasure_map       };
        -:   28: 
        -:   29:   struct gameState G, testG;
        1:   30:   int seed = 1000;
        -:   31:   int k[10];
        -:   32:   int numPlayers;;
        -:   33:   int rand_int;
        -:   34:   int rand_hand;
        -:   35:   int rand_deck;
        -:   36:   int rand_discard;
        -:   37:   int rand_actions;
        -:   38:   int total_passes; // counts the total number of tests that were passed
        -:   39:
        -:   40:   int i;
        -:   41:
    50001:   42:   for(i = 1; i <= TEST_RUNS; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    50000:   43:        printf("-- Test #: %d\n", i);
call    0 returned 100%
        -:   44:        // randomize number of players between 2 and 4
    50000:   45:        numPlayers = rand() % (4 + 1 - 2) + 2;
call    0 returned 100%
    50000:   46:        printf("-- # Players: %d\n", numPlayers);
call    0 returned 100%
        -:   47:
    50000:   48:        k[0] = village; // make sure adventurer is included
        -:   49:
        -:   50:        int j;
    50000:   51:        int numSelected = 1;
        -:   52:        int used;
    50000:   53:        int passes = 0; // counts the number of tests passed
        -:   54:
        -:   55:        // Get random kingdom cards
   699889:   56:        while(numSelected < 10){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   599889:   57:                used = 0;
        -:   58:                // rand_int used for random card selection
        -:   59:                do{
   633122:   60:	                rand_int = rand() % (26 + 1 - 8) + 8; // kingdom cards are elements 7-26
call    0 returned 100%
   633122:   61:		}while(rand_int == village);
branch  0 taken 5%
branch  1 taken 95% (fallthrough)
        -:   62:
  2771980:   63:                for(j = 1; j < numSelected; j++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
  2321980:   64:                        if(k[j] == cards[rand_int]){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
   149889:   65:                                used = 1;
   149889:   66:                                break;
        -:   67:                        }
        -:   68:                }
   599889:   69:                if(used == 1) continue;
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
   450000:   70:                k[j] = cards[rand_int];
   450000:   71:                numSelected++;
        -:   72:        }
        -:   73:
    50000:   74:        initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   75:
        -:   76:        // Set up decks with 0 to 10 cards
    50000:   77:        rand_hand = rand() % (10 + 1 - 1) + 1;
call    0 returned 100%
    50000:   78:        G.handCount[0] = rand_hand;
    50000:   79:        G.hand[0][0] = village;
        -:   80:
    50000:   81:        rand_deck = rand() % (10 + 1);
call    0 returned 100%
    50000:   82:        G.deckCount[0] = rand_deck;
        -:   83:
    50000:   84:        rand_discard = rand() % (10 + 1);
call    0 returned 100%
    50000:   85:        G.discardCount[0] = rand_discard;
        -:   86:
    50000:   87:	rand_actions = rand() % (100 + 1);
call    0 returned 100%
    50000:   88:	G.numActions = rand_actions;
        -:   89:
    50000:   90:        printf("\n\n---- Card Counts ----\n");
call    0 returned 100%
    50000:   91:        printf("-    Hand Count: %d\n", rand_hand);
call    0 returned 100%
    50000:   92:        printf("-    Deck Count: %d\n", rand_deck);
call    0 returned 100%
    50000:   93:        printf("- Discard Count: %d\n", rand_discard);
call    0 returned 100%
    50000:   94:	printf("- Actions Count: %d\n", rand_actions);
call    0 returned 100%
        -:   95:
    50000:   96:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   97:
    50000:   98:        printf("\n--- INITIAL DECKS ---\n\n");
call    0 returned 100%
        -:   99:        char name[MAX_STRING_LENGTH];
        -:  100:
    50000:  101:        printf("   Hand:  ");
call    0 returned 100%
   325121:  102:        for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
   275121:  103:                cardNumToName(G.hand[0][j], name);
call    0 returned 100%
   275121:  104:                printf("%s ", name);
call    0 returned 100%
        -:  105:        }
    50000:  106:        printf("\n");
call    0 returned 100%
        -:  107:
    50000:  108:        printf("   Deck:  ");
call    0 returned 100%
   299115:  109:        for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   249115:  110:                cardNumToName(G.deck[0][j], name);
call    0 returned 100%
   249115:  111:                printf("%s ", name);
call    0 returned 100%
        -:  112:        }
    50000:  113:        printf("\n");
call    0 returned 100%
        -:  114:
    50000:  115:        printf("Discard:  ");
call    0 returned 100%
   300210:  116:        for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   250210:  117:                cardNumToName(G.discard[0][j], name);
call    0 returned 100%
   250210:  118:                printf("%s ", name);
call    0 returned 100%
        -:  119:        }
    50000:  120:        printf("\n"); 
call    0 returned 100%
        -:  121:
    50000:  122:        printf(" Played:  ");
call    0 returned 100%
    50000:  123:        printf("\n");
call    0 returned 100%
        -:  124:
        -:  125:
        -:  126:// 	What village should do
    50000:  127:	drawCard(0, &G);
call    0 returned 100%
    50000:  128:	G.numActions += 2;
    50000:  129:	discardCard(0, 0, &G, 0);
call    0 returned 100%
        -:  130:
    50000:  131:        printf("\n--- EXPECTED DECKS ---\n\n");
call    0 returned 100%
        -:  132:
    50000:  133:        printf("   Hand:  ");
call    0 returned 100%
   324737:  134:        for(j = 0; j < G.handCount[0]; j++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
   274737:  135:                cardNumToName(G.hand[0][j], name);
call    0 returned 100%
   274737:  136:                printf("%s ", name);
call    0 returned 100%
        -:  137:        }
    50000:  138:        printf("\n");
call    0 returned 100%
        -:  139:
    50000:  140:        printf("   Deck:  ");
call    0 returned 100%
   272970:  141:        for(j = 0; j < G.deckCount[0]; j++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
   222970:  142:                cardNumToName(G.deck[0][j], name);
call    0 returned 100%
   222970:  143:                printf("%s ", name);
call    0 returned 100%
        -:  144:        }
    50000:  145:        printf("\n");
call    0 returned 100%
        -:  146:
    50000:  147:        printf("Discard:  ");
call    0 returned 100%
   276739:  148:        for(j = 0; j < G.discardCount[0]; j++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
   226739:  149:                cardNumToName(G.discard[0][j], name);
call    0 returned 100%
   226739:  150:                printf("%s ", name);
call    0 returned 100%
        -:  151:        }
    50000:  152:        printf("\n");
call    0 returned 100%
        -:  153:
    50000:  154:        printf(" Played:  ");
call    0 returned 100%
   100000:  155:        for(j = 0; j < G.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
    50000:  156:                cardNumToName(G.playedCards[j], name);
call    0 returned 100%
    50000:  157:                printf("%s ", name);
call    0 returned 100%
        -:  158:        }
    50000:  159:        printf("\n");
call    0 returned 100%
        -:  160:
        -:  161://        memcpy(&testG, &G, sizeof(struct gameState));
        -:  162:
    50000:  163:        cardEffect(village, 0, 0, 0, &testG, 0, NULL);
call    0 returned 100%
        -:  164:
    50000:  165:        printf("\n--- RESULTING DECKS ---\n\n");
call    0 returned 100%
        -:  166:
    50000:  167:        printf("   Hand:  ");
call    0 returned 100%
   324737:  168:        for(j = 0; j < testG.handCount[0]; j++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
   274737:  169:                cardNumToName(testG.hand[0][j], name);
call    0 returned 100%
   274737:  170:                printf("%s ", name);
call    0 returned 100%
        -:  171:        }
    50000:  172:        printf("\n");
call    0 returned 100%
        -:  173:
    50000:  174:        printf("   Deck:  ");
call    0 returned 100%
   272970:  175:        for(j = 0; j < testG.deckCount[0]; j++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
   222970:  176:                cardNumToName(testG.deck[0][j], name);
call    0 returned 100%
   222970:  177:                printf("%s ", name);
call    0 returned 100%
        -:  178:        }
    50000:  179:        printf("\n");
call    0 returned 100%
        -:  180:
    50000:  181:        printf("Discard:  ");
call    0 returned 100%
   276739:  182:        for(j = 0; j < testG.discardCount[0]; j++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
   226739:  183:                cardNumToName(testG.discard[0][j], name);
call    0 returned 100%
   226739:  184:                printf("%s ", name);
call    0 returned 100%
        -:  185:        }
    50000:  186:        printf("\n");
call    0 returned 100%
        -:  187:
    50000:  188:        printf(" Played:  ");
call    0 returned 100%
   100000:  189:        for(j = 0; j < testG.playedCardCount; j++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
    50000:  190:                cardNumToName(testG.playedCards[j], name);
call    0 returned 100%
    50000:  191:                printf("%s ", name);
call    0 returned 100%
        -:  192:        }
    50000:  193:        printf("\n");
call    0 returned 100%
        -:  194:
        -:  195:/*********************************************************************/
    50000:  196:	printf("*** Testing: Actions Increased by 2 ***\n");
call    0 returned 100%
        -:  197:
    50000:  198:	printf("Result: ");
call    0 returned 100%
    50000:  199:	if(testG.numActions == rand_actions + 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    50000:  200:		printf("PASSED\n\n");
call    0 returned 100%
    50000:  201:		passes++;
        -:  202:	}
        -:  203:	else{
    #####:  204:		printf("FAILED\n\n");
call    0 never executed
    #####:  205:		if(testG.numActions > rand_actions + 2)
branch  0 never executed
branch  1 never executed
    #####:  206:			printf("Test Actions had more actions added than 2.\n");
call    0 never executed
        -:  207:		else
    #####:  208:			printf("Test Actions had less actions than expected.\n");
call    0 never executed
        -:  209:	}
        -:  210:
    50000:  211:	printf("*** Testing: Hand Size Stays the Same (- Village + New Card) ***\n");
call    0 returned 100%
        -:  212:
    50000:  213:	printf("Results: ");
call    0 returned 100%
    50000:  214:	if(testG.handCount[0] == rand_hand){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    49616:  215:		printf("PASSED\n\n");
call    0 returned 100%
    49616:  216:		passes++;
        -:  217:	}
        -:  218:	else{
      384:  219:		printf("FAILED\n\n");
call    0 returned 100%
      384:  220:		if(testG.handCount[0] > rand_hand)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  221:			printf("Test Hand has too many cards in hand.\n");
call    0 never executed
        -:  222:		else
      384:  223:			printf("Test Hand has too few cards in hand.\n");
call    0 returned 100%
        -:  224:	}
        -:  225:	
    50000:  226:	printf("*** Testing: great_hall Added to Played Deck ***\n");
call    0 returned 100%
    50000:  227:	if(testG.playedCards[0] == village  &&  testG.playedCardCount == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    50000:  228:		printf("PASSED\n\n");
call    0 returned 100%
    50000:  229:		passes++;
        -:  230:	}
        -:  231:	else{
    #####:  232:		printf("FAILED\n\n");
call    0 never executed
    #####:  233:		if(testG.playedCards[0] != village)
branch  0 never executed
branch  1 never executed
    #####:  234:			printf("Last card played was not Village\n");
call    0 never executed
        -:  235:
    #####:  236:		if(testG.playedCardCount > 1){
branch  0 never executed
branch  1 never executed
    #####:  237:			printf("Too many cards added to play deck.\n");
call    0 never executed
        -:  238:		}
    #####:  239:		else if(testG.playedCardCount < 1)
branch  0 never executed
branch  1 never executed
    #####:  240:			printf("Too few cards added to play deck.\n");
call    0 never executed
        -:  241:	}
        -:  242:
    50000:  243:	printf("*** Testing: 1 card removed from deck ***\n");
call    0 returned 100%
    50000:  244:	if(rand_deck != 0){
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    45395:  245:		if(testG.deckCount[0] == rand_deck - 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    45395:  246:			printf("PASSED\n\n");
call    0 returned 100%
    45395:  247:			passes++;
        -:  248:		}
        -:  249:		else{
    #####:  250:			printf("FAILED\n\n");
call    0 never executed
    #####:  251:			if(testG.deckCount[0] > rand_deck - 1)
branch  0 never executed
branch  1 never executed
    #####:  252:				printf("Deck Count has too many cards.\n");
call    0 never executed
        -:  253:			else
    #####:  254:				printf("Deck Count has too few cards.\n");
call    0 never executed
        -:  255:		}
        -:  256:	}
        -:  257:	else{
     4605:  258:		if(testG.discardCount[0] == 0  &&  testG.deckCount[0] == rand_discard - 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
     4221:  259:			printf("PASSED\n\n");
call    0 returned 100%
     4221:  260:			passes++;
        -:  261:		}
        -:  262:		else{
      384:  263:			printf("FAILED\n\n");
call    0 returned 100%
      384:  264:			if(testG.discardCount[0] > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  265:				printf("Discard Deck not reset or started with 0.\n");
call    0 never executed
      384:  266:			if(testG.deckCount[0] > rand_discard - 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      384:  267:				printf("New deck failed to discard card into player's hand.\n");
call    0 returned 100%
    #####:  268:			else if(testG.deckCount[0] < rand_discard - 1)
branch  0 never executed
branch  1 never executed
    #####:  269:				printf("New deck discarded too many cards.\n");
call    0 never executed
        -:  270:		}
        -:  271:	}
        -:  272:		
        -:  273:
        -:  274:        // Check to see if card passed all tests
    50000:  275:        if(passes == CARD_TESTS){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    49616:  276:                printf("***** TRIAL PASSED ALL TESTS *****\n\n");
call    0 returned 100%
    49616:  277:                total_passes++;
        -:  278:        }
        -:  279:        else{
      384:  280:                printf("***** TRIAL FAILED *****\n\n");
call    0 returned 100%
        -:  281:        }
        -:  282:   }
        -:  283:
        1:  284:   printf("* TOTAL %d PASSED RUNS OUT OF %d TRIALS *\n\n", total_passes, TEST_RUNS);
call    0 returned 100%
        -:  285:   
        1:  286:   return 0;
        -:  287:}
